%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for User Name at 2017-05-21 21:41:55 -0700 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{joinads-a-retargetable-control-flow-construct-for-reactive-parallel-and-concurrent-programming,
	Abstract = {

Modern challenges led to a design of a wide range of programming models for reactive, parallel and concurrent programming, but these are often difficult to encode in general purpose languages. We present an abstract type of computations called joinads together with a syntactic language extension that aims to make it easier to use joinads in modern functional languages.

Our extension generalizes pattern matching to work on abstract computations. It keeps a familiar syntax and semantics of pattern matching making it easy to reason about code, even in a non-standard programming model. We demonstrate our extension using three important programming models -- a reactive model based on events; a concurrent model based on join calculus and a parallel model using futures. All three models are implemented as libraries that benefit from our syntactic extension. This makes them easier to use and also opens space for exploring new useful programming models.


},
	Author = {Petricek, Tomas and Syme, Don and},
	Booktitle = {Proceedings of Practical Aspects of Declarative Languages},
	Date-Added = {2017-05-22 04:18:55 +0000},
	Date-Modified = {2017-05-22 04:18:55 +0000},
	Month = {January},
	Publisher = {ACM},
	Title = {Joinads: a retargetable control-flow construct for reactive, parallel and concurrent programming},
	Url = {https://www.microsoft.com/en-us/research/publication/joinads-a-retargetable-control-flow-construct-for-reactive-parallel-and-concurrent-programming/},
	Year = {2011},
	Bdsk-Url-1 = {https://www.microsoft.com/en-us/research/publication/joinads-a-retargetable-control-flow-construct-for-reactive-parallel-and-concurrent-programming/}}

@book{FouGon2000,
	Abstract = {In these notes, we give an overview of the join calculus, its semantics, and its equational theory. The join calculus is a language that models distributed and mobile programming. It is characterized by an explicit notion of locality, a strict adherence to local synchronization, and a direct embedding of the ML programming language. The join calculus is used as the basis for several distributed languages and implementations, such as JoCaml and functional nets. Local synchronization means that messages always travel to a set destination, and can interact only after they reach that destination; this is required for an efficient implementation. Specifically, the join calculus uses ML's function bindings and pattern-matching on messages to program these synchronizations in a declarative manner. Formally, the language owes much to concurrency theory, which provides a strong basis for stating and proving the properties of asynchronous programs. Because of several remarkable identities, the theory of process equivalences admits simplifications when applied to the join calculus. We prove several of these identities, and argue that equivalences for the join calculus can be rationally organized into a five-tiered hierarchy, with some trade-off between expressiveness and proof techniques. We describe the mobility extensions of the core calculus, which allow the programming of agent creation and migration. We briefly present how the calculus has been extended to model distributed failures on the one hand, and cryptographic protocols on the other.},
	Author = {Fournet, C{\'e}dric and Gonthier, Georges},
	Date-Modified = {2017-05-21 10:53:25 +0000},
	Month = {September},
	Pages = {268-332},
	Title = {The Join Calculus: a Language for Distributed Mobile Programming},
	Url = {https://www.microsoft.com/en-us/research/publication/join-calculus-language-distributed-mobile-programming/},
	Year = {2000},
	Bdsk-Url-1 = {https://www.microsoft.com/en-us/research/publication/join-calculus-language-distributed-mobile-programming/}}
