#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 6: Functor-lifted computations I]{Chapter 6: Computations lifted to a functor context I}
\subtitle{Applications of pointed, filterable, and other functor type classes}
\author{Sergei Winitzki}
\date{January 21, 2018}
\institute[ABTB]{Academy by the Bay}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Filterable functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Consider these possibly useful properties of containers 
\begin_inset Formula $C^{A}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Can create an empty container
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{empty}^{A}:1\Rightarrow C^{A}$
\end_inset

 – 
\series bold
fillable
\end_layout

\begin_layout Itemize
Can create a container that holds a given value
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{wrap}^{A}:A\Rightarrow C^{A}$
\end_inset

 – 
\series bold
pointed
\end_layout

\begin_layout Itemize
Can extract an element from container
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{get}^{A}:C^{A}\Rightarrow A$
\end_inset

 – 
\series bold
co-pointed
\end_layout

\begin_layout Itemize
Can extract an element safely (even if the container is empty)
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{toOption}^{A}:C^{A}\Rightarrow1+A$
\end_inset

 – 
\series bold
extractable
\end_layout

\begin_layout Itemize
Can select element(s) satisfying a condition
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{withFilter}^{A}:C^{A}\Rightarrow\left(A\Rightarrow\text{Boolean}\right)\Rightarrow C^{A}$
\end_inset

 – 
\series bold
filterable
\end_layout

\end_deeper
\begin_layout Itemize
to formulate such properties, use fully type-parametric functions
\end_layout

\begin_deeper
\begin_layout Itemize
note: 
\begin_inset Formula $\text{Boolean}\equiv1+1$
\end_inset


\end_layout

\begin_layout Itemize
all functions have the form 
\begin_inset Formula $F^{A}\Rightarrow G^{A}$
\end_inset

 with some functors 
\begin_inset Formula $F$
\end_inset

, 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
functions of this sort are called 
\series bold
natural transformations
\end_layout

\begin_layout Itemize
parametricity (naturality) is the property that holds automatically for
 all such functions
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Generic properties of functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Motivation for pointed, co-pointed, and filtered functors
\end_layout

\begin_layout Itemize
Consider these possibly useful properties of containers 
\begin_inset Formula $C^{A}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Can create an empty container
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{empty}^{A}:1\Rightarrow C^{A}$
\end_inset

 – 
\series bold
fillable
\end_layout

\begin_layout Itemize
Can create a container that holds a given value
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{wrap}^{A}:A\Rightarrow C^{A}$
\end_inset

 – 
\series bold
pointed
\end_layout

\begin_layout Itemize
Can extract an element from container
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{get}^{A}:C^{A}\Rightarrow A$
\end_inset

 – 
\series bold
co-pointed
\end_layout

\begin_layout Itemize
Can extract an element safely (even if the container is empty)
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{toOption}^{A}:C^{A}\Rightarrow1+A$
\end_inset

 – 
\series bold
extractable
\end_layout

\begin_layout Itemize
Can select element(s) satisfying a condition
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\text{withFilter}^{A}:C^{A}\Rightarrow\left(A\Rightarrow\text{Boolean}\right)\Rightarrow C^{A}$
\end_inset

 – 
\series bold
filterable
\end_layout

\end_deeper
\begin_layout Itemize
to formulate such properties, use fully type-parametric functions
\end_layout

\begin_deeper
\begin_layout Itemize
note: 
\begin_inset Formula $\text{Boolean}\equiv1+1$
\end_inset


\end_layout

\begin_layout Itemize
all functions have the form 
\begin_inset Formula $F^{A}\Rightarrow G^{A}$
\end_inset

 with some functors 
\begin_inset Formula $F$
\end_inset

, 
\begin_inset Formula $G$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
functions of this sort are called 
\series bold
natural transformations
\end_layout

\begin_layout Itemize
parametricity (naturality) is the property that holds automatically for
 all such functions
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples I: Pointed functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
This is the only way to implement 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 that satisfies the functor laws!
\end_layout

\begin_layout Standard
See test code for checking the functor laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples II: Co-pointed functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
This is the only way to implement 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 that satisfies the functor laws!
\end_layout

\begin_layout Standard
See test code for checking the functor laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples III: Filtered functors
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
This is the only way to implement 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 that satisfies the functor laws!
\end_layout

\begin_layout Standard
See test code for checking the functor laws
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples: Checking the functor laws
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To check that the 
\family typewriter
\size footnotesize
\color blue
fmap
\family default
\size default
\color inherit
 laws hold for 
\begin_inset Formula $F^{A}+G^{A}$
\end_inset

 if they hold for 
\begin_inset Formula $F^{A}$
\end_inset

 and 
\begin_inset Formula $G^{A}$
\end_inset


\end_layout

\begin_layout Itemize
From 
\begin_inset Formula $f:A\Rightarrow B$
\end_inset

, get 
\begin_inset Formula $\text{fmap}_{F}(f):F^{A}\Rightarrow F^{B}$
\end_inset

 and 
\begin_inset Formula $\text{fmap}_{G}(f):G^{A}\Rightarrow G^{B}$
\end_inset


\end_layout

\begin_layout Itemize
Define 
\begin_inset Formula $\text{fmap}_{F+G}(f)=(p^{F^{A}}+q^{G^{A}})\Rightarrow\text{fmap}_{F}(f)(p)+\text{fmap}_{G}(f)(q)$
\end_inset


\end_layout

\begin_layout Itemize
Identity law: 
\begin_inset Formula $f=id$
\end_inset

, so 
\begin_inset Formula $\text{fmap}_{F}(f)=id$
\end_inset

 and 
\begin_inset Formula $\text{fmap}_{G}(f)=id$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Hence we get 
\begin_inset Formula $\text{fmap}_{F+G}(id)(p+q)=id(p)+id(q)=p+q$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Composition law: 
\begin_inset Formula 
\begin{align*}
 & (\text{fmap}_{F+G}(f_{1})\circ\text{fmap}_{F+G}(f_{2}))(p+q)\\
=\  & \text{fmap}_{F+G}(f_{2})\left(\text{fmap}_{F}(f_{1})(p)+\text{fmap}_{G}(f_{1})(q)\right)\\
=\  & (\text{fmap}_{F}(f_{1})\circ\text{fmap}_{F}(f_{2}))(p)+\left(\text{fmap}_{G}(f_{1})\circ\text{fmap}_{G}(f_{2})\right)(q)\\
=\  & \text{fmap}_{F}(f_{1}\circ f_{2})(p)+\text{fmap}_{G}(f_{1}\circ f_{2})(q)\\
=\  & \text{fmap}_{F+G}(f_{1}\circ f_{2})(p+q)
\end{align*}

\end_inset


\end_layout

\begin_layout Itemize
Note how 
\begin_inset Formula $\text{fmap}_{F+G}(f)$
\end_inset

 works on each side of 
\begin_inset Formula $\left(p+q\right)$
\end_inset

 separately
\end_layout

\begin_layout Itemize
The laws would not hold if we mixed up some parts of 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Check that the 
\family typewriter
\size footnotesize
\color blue
fmap
\family default
\size default
\color inherit
 laws hold for 
\begin_inset Formula $F^{A}\times G^{A}$
\end_inset

 if they hold for 
\begin_inset Formula $F^{A}$
\end_inset

 and 
\begin_inset Formula $G^{A}$
\end_inset


\end_layout

\begin_layout Enumerate
Show that 
\begin_inset Formula $F^{A}\Rightarrow G^{A}$
\end_inset

 is, in general, neither a functor nor a contrafunctor when both 
\begin_inset Formula $F^{A}$
\end_inset

 and 
\begin_inset Formula $G^{A}$
\end_inset

 are functors or both are contrafunctors (an example of suitable 
\begin_inset Formula $F^{A}$
\end_inset

 and 
\begin_inset Formula $G^{A}$
\end_inset

 will be sufficient)
\end_layout

\begin_layout Enumerate
Show that 
\begin_inset Formula $F^{A}\Rightarrow G^{A}$
\end_inset

 is a contrafunctor if 
\begin_inset Formula $F^{A}$
\end_inset

 is a functor and 
\begin_inset Formula $G^{A}$
\end_inset

 is a contrafunctor, by checking the 
\family typewriter
\size footnotesize
\color blue
contrafmap
\family default
\size default
\color inherit
 laws for 
\begin_inset Formula $F^{A}\Rightarrow G^{A}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Other topics:
\end_layout

\begin_layout Itemize
Implementing Functor instance using Cats and Scalaz
\end_layout

\begin_layout Itemize
Implementing Functor instance for recursive types 
\end_layout

\begin_layout Itemize
Functor typeclass derivation using Shapeless
\end_layout

\begin_layout Itemize
Functions that are parameterized by a Functor type constructor
\end_layout

\begin_layout Itemize
Examples of APIs that consume a functor, with type class constraint
\end_layout

\begin_layout Plain Layout
End of slides.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
