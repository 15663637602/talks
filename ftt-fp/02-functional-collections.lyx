#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Chapter 2: Functional Collections]{Chapter 2: The Functional Approach to Collections}
\author{Sergei Winitzki}
\date{November 12, 2017}
\institute[ABTB]{Academy by the Bay}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tuples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pair of values: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val a:
\begin_inset space \space{}
\end_inset

(Int, String) = (123, 
\begin_inset Quotes eld
\end_inset

xyz
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Triple of values: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val b:
\begin_inset space \space{}
\end_inset

(Boolean, Int, Int) = (true, 3, 4)
\end_layout

\begin_layout Itemize
Tuples can be nested: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val c:
\begin_inset space \space{}
\end_inset

(Boolean, (String, Int), Boolean) =
\begin_inset Newline newline
\end_inset

 (true, (
\begin_inset Quotes eld
\end_inset

abc
\begin_inset Quotes erd
\end_inset

, 3), false)
\end_layout

\begin_layout Itemize
Parts of the tuple can be accessed by number: 
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

val x:
\begin_inset space \space{}
\end_inset

(String, Int) = c._2
\end_layout

\begin_layout Itemize
Functions on tuples:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

def f(p:
\begin_inset space \space{}
\end_inset

(Boolean, Int), q:
\begin_inset space \space{}
\end_inset

Int):
\begin_inset space \space{}
\end_inset

Boolean = p._1 && (p._2 > q) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pattern-matching syntax for tuples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Scala allows pattern matching in two places:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val 
\family default
\emph on
pattern
\family typewriter
\emph default
 = ...

\family default
\size default
\color inherit
 (value assignment)
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
case 
\family default
\emph on
pattern
\family typewriter
\emph default
 
\family default

\begin_inset Formula $\Rightarrow$
\end_inset


\family typewriter
 ...

\family default
\size default
\color inherit
 (partial function)
\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val a = (1, 2, 3); val (x, y, z) = a
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
val f:
\begin_inset space \space{}
\end_inset

((Int, Int, Int)) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int = { case (x, y, z) 
\begin_inset Formula $\Rightarrow$
\end_inset

 x + y + z }; f(a)
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Combining tuple types with other types
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We can use tuple types anywhere:
\end_layout

\begin_layout Itemize
Tuple of functions:
\begin_inset Newline newline
\end_inset

 
\family typewriter
\size footnotesize
\color blue
val q:
\begin_inset space \space{}
\end_inset

(Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int, Int 
\begin_inset Formula $\Rightarrow$
\end_inset

 Int) = (x 
\begin_inset Formula $\Rightarrow$
\end_inset

 x + 1, x 
\begin_inset Formula $\Rightarrow$
\end_inset

 x - 1)
\end_layout

\begin_layout Itemize
Sequence of tuples:
\begin_inset Newline newline
\end_inset

 
\family typewriter
\size footnotesize
\color blue
val s:
\begin_inset space \space{}
\end_inset

Seq[(String, Int)] =
\begin_inset Newline newline
\end_inset

 
\begin_inset space \space{}
\end_inset

 Seq((
\begin_inset Quotes eld
\end_inset

apples
\begin_inset Quotes erd
\end_inset

, 3), (
\begin_inset Quotes eld
\end_inset

oranges
\begin_inset Quotes erd
\end_inset

, 2), (
\begin_inset Quotes eld
\end_inset

pears
\begin_inset Quotes erd
\end_inset

, 0))
\end_layout

\begin_layout Itemize
Tuples are used a lot in the Scala standard library...
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
zip:
\begin_inset space \space{}
\end_inset

(Seq[A], Seq[B]) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Seq[(A, B)]
\end_layout

\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
map:
\begin_inset space \space{}
\end_inset

(Map[K, V], (K, V) 
\begin_inset Formula $\Rightarrow$
\end_inset

 R) 
\begin_inset Formula $\Rightarrow$
\end_inset

 Seq[R]
\end_layout

\begin_deeper
\begin_layout Itemize
Note: the syntax 
\family typewriter
\size footnotesize
\color blue
(a 
\begin_inset Formula $\rightarrow$
\end_inset

 b)
\family default
\size default
\color inherit
 means the same as the tuple 
\family typewriter
\size footnotesize
\color blue
(a, b) 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
\size footnotesize
\color blue
toMap:
\begin_inset space \space{}
\end_inset

Seq[(K, V)] 
\begin_inset Formula $\Rightarrow$
\end_inset

 Map[K, V]
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Worked examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
for a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, compute the sequence of pairs 
\begin_inset Formula $b_{i}=\left(\cos a_{i},\sin a_{i}\right)$
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\end_layout

\begin_layout Enumerate
in a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, count how many times 
\begin_inset Formula $\cos a_{i}>\sin a_{i}$
\end_inset

 occurs
\begin_inset Newline newline
\end_inset

– use 
\family typewriter
\size footnotesize
\color blue
.count
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\end_layout

\begin_layout Enumerate
for given sequences 
\begin_inset Formula $a_{i}$
\end_inset

 and 
\begin_inset Formula $b_{i}$
\end_inset

, compute the sequence of differences
\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $c_{i}=a_{i}-b_{i}$
\end_inset

 (use 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, assume 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Enumerate
in a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, count how many times 
\begin_inset Formula $a_{i}>a_{i+1}$
\end_inset

 occurs
\end_layout

\begin_layout Enumerate
for a given 
\begin_inset Formula $k>0$
\end_inset

, compute the sequence 
\begin_inset Formula $b_{i}=\max(a_{i-k},...,a_{i+k})$
\end_inset


\begin_inset Newline newline
\end_inset

 – use 
\family typewriter
\size footnotesize
\color blue
.sliding
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Enumerate
create a multiplication table as a value of type 
\family typewriter
\size footnotesize
\color blue
Map[(Int, Int), Int]
\begin_inset Newline newline
\end_inset


\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\end_layout

\begin_layout Enumerate
for a given sequence 
\begin_inset Formula $a_{i}$
\end_inset

, compute the combined set of the numbers 
\begin_inset Formula $a_{i}$
\end_inset

, 
\begin_inset Formula $\cos a_{i}$
\end_inset

 
\begin_inset Formula $\sin a_{i}$
\end_inset

 and find its maximum value – use 
\family typewriter
\size footnotesize
\color blue
.map, .flatMap, .max
\end_layout

\begin_layout Enumerate
from a 
\family typewriter
\size footnotesize
\color blue
Map[String, String]
\family default
\size default
\color inherit
 mapping names to addresses, and assuming that the addresses do not repeat,
 compute a 
\family typewriter
\size footnotesize
\color blue
Map[String, String]
\family default
\size default
\color inherit
 mapping addresses to names – use 
\family typewriter
\size footnotesize
\color blue
.toMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
Name
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Address
\family default
\size default
\color inherit
 instead of the fixed type 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Find all 
\begin_inset Formula $i,j$
\end_inset

 within 
\begin_inset Formula $\left(0,1,...,9\right)$
\end_inset

 such that 
\begin_inset Formula $i+4*j>i*j$
\end_inset

 (use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\family default
\size default
\color inherit
)
\end_layout

\begin_deeper
\begin_layout Itemize
Same task for 
\begin_inset Formula $i,j,k$
\end_inset

 and the condition 
\begin_inset Formula $i+4*j+9*k>i*j*k$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Given two sequences 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Boolean]
\family default
\size default
\color inherit
 of equal length, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 with those elements of 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 for which the corresponding element of 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 is 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.filter
\end_layout

\begin_layout Enumerate
Convert a 
\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 into a 
\family typewriter
\size footnotesize
\color blue
Seq[(Int, Boolean)]
\family default
\size default
\color inherit
 where the Boolean value is 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 when the element is followed by a larger value; e.g.
 
\family typewriter
\size footnotesize
\color blue
Seq(1,3,2,4)
\family default
\size default
\color inherit
 is to be converted into 
\family typewriter
\size footnotesize
\color blue
Seq((1,true),(3,false),(2,true))
\end_layout

\begin_layout Enumerate
Given 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 of equal length, and assuming that elements of 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 do not repeat, compute a 
\family typewriter
\size footnotesize
\color blue
Map[Int, String]
\family default
\size default
\color inherit
 that maps numbers from 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 to their corresponding strings from 
\family typewriter
\size footnotesize
\color blue
a
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
I
\family default
\size default
\color inherit
 instead of the fixed types 
\family typewriter
\size footnotesize
\color blue
String
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Int
\end_layout

\end_deeper
\begin_layout Enumerate
Given 
\family typewriter
\size footnotesize
\color blue
a:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b:
\family default
\size default
\color inherit

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
\color blue
Seq[Int]
\family default
\size default
\color inherit
 of equal length, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[String]
\family default
\size default
\color inherit
 that contains the strings from 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 ordered according to the corresponding numbers from 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.sortBy
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameter 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Given a 
\family typewriter
\size footnotesize
\color blue
Seq[(String, Int)]
\family default
\size default
\color inherit
 showing a list of purchased items (names may repeat), compute 
\family typewriter
\size footnotesize
\color blue
Map[String, Int]
\family default
\size default
\color inherit
 showing the total counts: e.g.
\begin_inset space ~
\end_inset

given a 
\family typewriter
\size footnotesize
\color blue
Seq((
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

, 2), (
\begin_inset Quotes eld
\end_inset

pear
\begin_inset Quotes erd
\end_inset

, 3), (
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

, 5))
\family default
\size default
\color inherit
, compute 
\family typewriter
\size footnotesize
\color blue
Map(
\begin_inset Quotes eld
\end_inset

apple
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 7, 
\begin_inset Quotes eld
\end_inset

pear
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 3)
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.groupBy
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.sum
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameter 
\family typewriter
\size footnotesize
\color blue
S
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
String
\end_layout

\end_deeper
\begin_layout Enumerate
Given a 
\family typewriter
\size footnotesize
\color blue
Seq[List[Int]]
\family default
\size default
\color inherit
, compute a 
\family typewriter
\size footnotesize
\color blue
Seq[List[Int]]
\family default
\size default
\color inherit
 where each new inner list contains the three largest elements from the
 initial inner list – use 
\family typewriter
\size footnotesize
\color blue
.sortBy
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.take
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.map
\end_layout

\begin_layout Enumerate
Given two sets 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 of type 
\family typewriter
\size footnotesize
\color blue
Set[Int]
\family default
\size default
\color inherit
, compute a 
\family typewriter
\size footnotesize
\color blue
Set[(Int, Int)]
\family default
\size default
\color inherit
 representing the Cartesian product of the sets 
\family typewriter
\size footnotesize
\color blue
a
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
b
\family default
\size default
\color inherit
 – use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\end_layout

\begin_deeper
\begin_layout Itemize
Write this as a function with type parameters 
\family typewriter
\size footnotesize
\color blue
I
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
J
\family default
\size default
\color inherit
 instead of 
\family typewriter
\size footnotesize
\color blue
Int
\end_layout

\end_deeper
\begin_layout Enumerate
* Given a 
\family typewriter
\size footnotesize
\color blue
Seq[Map[Person, Amount]]
\family default
\size default
\color inherit
, showing the amounts various people paid on each day, compute a 
\family typewriter
\size footnotesize
\color blue
Map[Person, Seq[Amount]]
\family default
\size default
\color inherit
, showing the sequence of payments for each person (assume 
\family typewriter
\size footnotesize
\color blue
Person
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
Amount
\family default
\size default
\color inherit
 are type parameters and use 
\family typewriter
\size footnotesize
\color blue
.flatMap
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.toSeq
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.groupBy
\family default
\size default
\color inherit
)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a number from a sequence
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
Compute an integer value from the sequence of its decimal digits
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int = ???
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
fromDigits(Seq(1, 3, 0, 0)) == 1300
\end_layout

\begin_layout Standard
Mathematical formulation uses 
\emph on
induction
\end_layout

\begin_layout Itemize
base case: empty sequence: 
\family typewriter
\size footnotesize
\color blue
fromDigits(Seq()) = 0
\end_layout

\begin_layout Itemize
induction step: if 
\family typewriter
\size footnotesize
\color blue
fromDigits
\family default
\size default
\color inherit
 is already computed for a sequence 
\size footnotesize
\emph on
\color blue
previous
\emph default
...
\size default
\color inherit
, how to compute it for a sequence with one more element:
\family typewriter
\size footnotesize
\color blue

\begin_inset Newline newline
\end_inset

fromDigits(Seq(
\family default
\emph on
previous...
\family typewriter
\emph default
, x)) = 10 * fromDigits(
\family default
\emph on
previous...
\family typewriter
\emph default
) + x
\end_layout

\begin_deeper
\begin_layout Itemize
the result still needs to be divided by 10
\end_layout

\end_deeper
\begin_layout Standard
Translating mathematical induction into code:
\end_layout

\begin_layout Itemize
use recursion
\end_layout

\begin_layout Itemize
use standard library functions 
\family typewriter
\size footnotesize
\color blue
fold
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
scan
\family default
\size default
\color inherit
, etc.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Writing a recursive function by hand
\end_layout

\begin_layout Itemize
base case vs.
\begin_inset space ~
\end_inset

inductive step needs to be decided in the code
\end_layout

\begin_layout Itemize
the function calls itself recursively
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int = {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
 digits match {
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  case Seq() 
\begin_inset Formula $\Rightarrow$
\end_inset

 0
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  case _ 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    val x = digits.head
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    val rest = digits.tail
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
    
\family typewriter
10 * fromDigits(
\family default
rest) + x
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
 }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
}
\end_layout

\begin_layout Itemize
lots of code...
\end_layout

\begin_deeper
\begin_layout Itemize
not very different from writing a loop
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a number from a sequence
\end_layout

\begin_layout Standard
The standard function 
\family typewriter
\size footnotesize
\color blue
foldLeft
\family default
\size default
\color inherit
 implements general induction:
\end_layout

\begin_layout Itemize
base case is the first argument to 
\family typewriter
\size footnotesize
\color blue
foldLeft
\end_layout

\begin_layout Itemize
induction step is represented by a function
\family typewriter
 
\size footnotesize
\color blue
(previous, x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 next
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
def fromDigits(digits: Seq[Int]): Int =
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  digits.foldLeft(0){ case (prev, x)
\family typewriter
 
\begin_inset Formula $\Rightarrow$
\end_inset

 prev * 10 + x
\family default
 }
\end_layout

\begin_layout Itemize
see other library functions: 
\family typewriter
\size footnotesize
\color blue
.foldRight
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.fold
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.reduce
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a sequence from a number (
\family typewriter
iterate
\family default
)
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
compute the sequence of decimal digits of a given integer
\end_layout

\begin_deeper
\begin_layout Itemize
we cannot solve this with 
\family typewriter
\size footnotesize
\color blue
.map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.zip
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
.fold
\family default
\size default
\color inherit
 etc., because the length of the resulting sequence is unknown
\end_layout

\begin_layout Itemize
we need to 
\begin_inset Quotes eld
\end_inset

unfold
\begin_inset Quotes erd
\end_inset

 into a sequence of unknown length, and terminate it when some condition
 holds
\end_layout

\end_deeper
\begin_layout Standard
The 
\family typewriter
\size footnotesize
\color blue
Iterator 
\family default
\size default
\color inherit
type has methods 
\family typewriter
\size footnotesize
\color blue
iterate
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
fill
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
tabulate
\family default
\size default
\color inherit
 that can help
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mathematical induction V
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Computing a sequence from a sequence (
\family typewriter
scan
\family default
)
\end_layout

\begin_layout Standard
Typical problem:
\end_layout

\begin_layout Itemize
compute partial sums of the given sequence
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Using both 
\family typewriter
\size footnotesize
\color blue
def
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
val
\family default
\size default
\color inherit
, define a function that...
\end_layout

\begin_deeper
\begin_layout Enumerate
adds 20 to its integer argument
\end_layout

\begin_layout Enumerate
takes an integer 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
, and returns a 
\emph on
function
\emph default
 that adds 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 to 
\emph on
its
\emph default
 argument
\end_layout

\begin_layout Enumerate
takes an integer 
\family typewriter
\size footnotesize
\color blue
x
\family default
\size default
\color inherit
 and returns 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
 iff 
\family typewriter
\size footnotesize
\color blue
x + 1
\family default
\size default
\color inherit
 is prime
\end_layout

\end_deeper
\begin_layout Itemize
What are the types of the functions in Examples 1 - 3?
\end_layout

\begin_layout Itemize
Compute the average of all numbers in a sequence of type 
\family typewriter
\size footnotesize
\color blue
Seq[Double]
\family default
\size default
\color inherit
.
 Use 
\family typewriter
\size footnotesize
\color blue
sum
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
size
\family default
\size default
\color inherit
 but no loops.
\end_layout

\begin_layout Itemize
Given 
\begin_inset Formula $n$
\end_inset

, compute 
\begin_inset CommandInset href
LatexCommand href
name "the Wallis product"
target "https://en.wikipedia.org/wiki/Wallis_product"

\end_inset

 truncated up to 
\begin_inset Formula $\frac{2n}{2n+1}$
\end_inset

: 
\begin_inset Formula 
\[
\frac{2}{1}\frac{2}{3}\frac{4}{3}\frac{4}{5}\frac{6}{5}\frac{6}{7}...\frac{2n}{2n+1}.
\]

\end_inset

Use a sequence of 
\family typewriter
\size footnotesize
\color blue
Int
\family default
\size default
\color inherit
 or 
\family typewriter
\size footnotesize
\color blue
Double
\family default
\size default
\color inherit
 numbers, 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
, and 
\family typewriter
\size footnotesize
\color blue
product
\family default
\size default
\color inherit
.
\end_layout

\begin_layout Itemize
Given 
\family typewriter
\size footnotesize
\color blue
s:
\begin_inset space ~
\end_inset

Seq[Set[Int]]
\family default
\size default
\color inherit
, compute the sequence containing the sets of size at least 3.
 Use 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
filter
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
size
\family default
\size default
\color inherit
.
 The result must be again of type 
\family typewriter
\size footnotesize
\color blue
Seq[Set[Int]]
\family default
\size default
\color inherit
.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
What problems can we solve now?
\end_layout

\begin_deeper
\begin_layout Itemize
Compute mathematical expressions involving sums, products, and quantifiers,
 based on integer ranges (such as 
\begin_inset Formula $\sum_{k=1}^{n}f(k)$
\end_inset

 etc.)
\end_layout

\begin_layout Itemize
Implement functions that take or return other functions
\end_layout

\begin_layout Itemize
Work on collections using 
\family typewriter
\size footnotesize
\color blue
map
\family default
\size default
\color inherit
 and other library methods
\end_layout

\end_deeper
\begin_layout Itemize
What kinds of problems are not solved with these tools?
\end_layout

\begin_deeper
\begin_layout Itemize
Compute the smallest 
\begin_inset Formula $n$
\end_inset

 such that 
\begin_inset Formula $f(f(f(...f(1)...)>1000$
\end_inset

, where the function 
\begin_inset Formula $f$
\end_inset

 is applied 
\begin_inset Formula $n$
\end_inset

 times.
\end_layout

\begin_layout Itemize
Find the 
\begin_inset Formula $k$
\end_inset

-th largest element in an (unsorted) array of integers.
\end_layout

\begin_layout Itemize
Perform binary search over a sorted array.
\end_layout

\end_deeper
\begin_layout Itemize
Why can't we solve such problems yet?
\end_layout

\begin_deeper
\begin_layout Itemize
Because we can't yet put 
\emph on
mathematical induction
\emph default
 into code
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exercises
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Define a function of type 
\family typewriter
\size footnotesize
\color blue
Seq[Double] => Seq[Double]
\family default
\size default
\color inherit
 that 
\begin_inset Quotes eld
\end_inset

normalizes
\begin_inset Quotes erd
\end_inset

 the sequence: it finds the element having the max.
\begin_inset space ~
\end_inset

absolute value and, if that value is nonzero, divides all elements by that
 factor.
\end_layout

\begin_layout Enumerate
Define a function of type 
\family typewriter
\size footnotesize
\color blue
Seq[Seq[Int]] => Seq[Seq[Int]]
\family default
\size default
\color inherit
 that adds 20 to every element of every inner sequence.
\end_layout

\begin_layout Enumerate
An integer 
\begin_inset Formula $n$
\end_inset

 is called 
\begin_inset Quotes eld
\end_inset

3-factor
\begin_inset Quotes erd
\end_inset

 if it is divisible by only three different integers 
\begin_inset Formula $j$
\end_inset

 such that 
\begin_inset Formula $2\leq j<n$
\end_inset

.
 Compute the set of all 
\begin_inset Quotes eld
\end_inset

3-factor
\begin_inset Quotes erd
\end_inset

 integers 
\begin_inset Formula $n$
\end_inset

 among 
\begin_inset Formula $n\in[1,...,1000]$
\end_inset

 .
\end_layout

\begin_layout Enumerate
Given a function 
\begin_inset Formula $f$
\end_inset

 of type 
\family typewriter
\size footnotesize
\color blue
Int => Boolean
\family default
\size default
\color inherit
, an integer 
\begin_inset Formula $n$
\end_inset

 is called 
\begin_inset Quotes eld
\end_inset

3-
\begin_inset Formula $f$
\end_inset


\begin_inset Quotes erd
\end_inset

 if there are only three different integers 
\begin_inset Formula $j\in[1,...,n]$
\end_inset

 such that 
\begin_inset Formula $f(j)$
\end_inset

 returns 
\family typewriter
\size footnotesize
\color blue
true
\family default
\size default
\color inherit
.
 Define a function that takes 
\begin_inset Formula $f$
\end_inset

 as an argument and returns a sequence of all 
\begin_inset Quotes eld
\end_inset

3-
\begin_inset Formula $f$
\end_inset


\begin_inset Quotes erd
\end_inset

 integers among 
\begin_inset Formula $n\in[1,...,1000]$
\end_inset

.
 What is the type of that function? Rewrite Exercise
\begin_inset space ~
\end_inset

3 using that function.
\end_layout

\begin_layout Enumerate
Define a function that takes two functions 
\family typewriter
\size footnotesize
\color blue
f:
\begin_inset space ~
\end_inset

Int => Double
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
g:
\begin_inset space ~
\end_inset

Double => String
\family default
\size default
\color inherit
 as arguments, and returns a new function that computes the functional compositi
on of 
\family typewriter
\size footnotesize
\color blue
f
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
g
\family default
\size default
\color inherit
.
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\end_body
\end_document
