#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title{Introduction to Join Calculus}
\author{Sergei Winitzki}
\date{November 10, 2013}
\institute[Versal Group Inc.]{Scala Study Group}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Motivation
\end_layout

\begin_layout Standard
Imperative concurrency is difficult:
\end_layout

\begin_layout Itemize
callbacks, semaphores, locks, threads, shared state
\end_layout

\begin_layout Itemize
testing??
\end_layout

\begin_layout Standard
Pure functional concurrency is better:
\end_layout

\begin_layout Itemize
futures = 
\begin_inset Quotes eld
\end_inset

async monads
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Erlang's purely functional messaging; 
\begin_inset Quotes eld
\end_inset

actors
\begin_inset Quotes erd
\end_inset

 (Akka in Scala)
\end_layout

\begin_layout Standard

\series bold
Join Calculus
\series default
:
\end_layout

\begin_layout Itemize
Elegant, concise model of concurrent computation
\end_layout

\begin_layout Itemize
Join Calculus = 
\begin_inset Quotes eld
\end_inset


\emph on
more
\emph default
 purely functionally concurrent
\begin_inset Quotes erd
\end_inset

 actors
\end_layout

\begin_layout Itemize
Working implementation: 
\series bold
JoCaml
\series default
 (
\begin_inset CommandInset href
LatexCommand href
name "jocaml.inria.fr"
target "http://jocaml.inria.fr"

\end_inset

)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
A taste of OCaml
\end_layout

\begin_layout Standard
Common features to F#, Haskell, OCaml, SML, Scala:
\end_layout

\begin_layout Itemize
Expression-oriented programming:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
let s = 
\series bold
(if
\series default
 1=1 
\series bold
then
\series default
 
\begin_inset Quotes eld
\end_inset

Hello, world!
\begin_inset Quotes erd
\end_inset

 
\series bold
else
\series default
 
\begin_inset Quotes eld
\end_inset

Error
\begin_inset Quotes erd
\end_inset

) 
\series bold
in
\series default
 print_string s
\end_layout

\begin_layout Itemize
Algebraic data types, parametric polymorphism:
\begin_inset Newline newline
\end_inset


\size scriptsize
\color blue
 
\family typewriter
\series bold
type
\series default
 'a bTree = Leaf of 'a | Node of ('a bTree * 'a bTree)
\end_layout

\begin_layout Itemize
Immutable, scoped values, with statically inferred types:
\begin_inset Newline newline
\end_inset


\color blue
 
\family typewriter
\size scriptsize
# 
\series bold
let
\series default
 x = 3 
\series bold
in
\series default
 (
\series bold
let
\series default
 x = x+1 
\series bold
in
\series default
 x/2) * x;;
\begin_inset Newline newline
\end_inset


\color black
- : int = 6
\family default
 
\end_layout

\begin_layout Itemize
Mutually recursive definitions:
\begin_inset Newline newline
\end_inset


\size scriptsize
\color blue
 
\family typewriter
# 
\series bold
le
\series default
t 
\series bold
rec
\series default
 
\begin_inset space ~
\end_inset

isEven n = 
\series bold
if
\series default
 n=0 
\series bold
then
\series default
 true 
\series bold
else
\series default
 isOdd (n-1) 
\begin_inset Newline newline
\end_inset

 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
and
\series default
 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

isOdd n = 
\series bold
if
\series default
 n=0 
\series bold
then
\series default
 false 
\series bold
else
\series default
 isEven (n-1);;
\family default
 
\family typewriter

\begin_inset Newline newline
\end_inset


\color black
val isEven : int -> bool = <fun>
\family default
 
\family typewriter

\begin_inset Newline newline
\end_inset

val isOdd : int -> bool = <fun>
\family default
\color blue
 
\family typewriter

\begin_inset Newline newline
\end_inset

# let result = List.map (fun x -> (isEven x, isOdd x)) [1; 2];;
\family default
 
\family typewriter

\begin_inset Newline newline
\end_inset


\color black
val result : (bool * bool) list = [ (false, true); (true, false) ]
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus in a nutshell
\end_layout

\begin_layout FrameSubtitle
The Reflexive Chemical Abstract Machine (RChAM)
\end_layout

\begin_layout Standard
Abstract chemistry: 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

reactions
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Chemical soup contains many 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
A group of molecules starts a 
\begin_inset Quotes eld
\end_inset

chemical reaction
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
jocaml> 
\begin_inset space ~
\end_inset

 def
\begin_inset space ~
\end_inset

 a() & b() = c()
\color black

\begin_inset Newline newline
\end_inset


\color blue

\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 and 
\begin_inset space ~
\end_inset

a() & c() = 0;;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color black
val a : unit Join.chan = <abstr>
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color black
val b : unit Join.chan = <abstr>
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color black
val c : unit Join.chan = <abstr>
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham1.eps
	width 100col%

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Using the 
\begin_inset Quotes eld
\end_inset

chemical machine
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
We define arbitrary 
\begin_inset Quotes eld
\end_inset

chemical laws
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset

: 
\family typewriter
\size scriptsize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
b
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
c
\family default
\size default
\color inherit
, ...
\end_layout

\begin_layout Itemize
We inject some 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset

 into the soup: 
\family typewriter
\size scriptsize
\color blue
spawn a() & a() & b()
\end_layout

\begin_deeper
\begin_layout Itemize
Note: 
\family typewriter
\size scriptsize
\color blue
a() & a() & b()
\family default
\size default
\color inherit
 is the syntax for 
\begin_inset Quotes eld
\end_inset

molecule-valued
\begin_inset Quotes erd
\end_inset

 expressions
\end_layout

\end_deeper
\begin_layout Itemize
The runtime system evolves the soup 
\emph on
asynchronously
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus in a nutshell
\end_layout

\begin_layout FrameSubtitle
Concurrent computations
\end_layout

\begin_layout Standard
Sequential computation = evaluating an expression
\end_layout

\begin_layout Standard
Concurrent computation = evaluating several expressions at once
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Join Calculus organizes concurrent computations through 
\begin_inset Quotes eld
\end_inset

chemistry
\begin_inset Quotes erd
\end_inset

:
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Each molecule carries a 
\series bold
value
\series default
 
\end_layout

\begin_layout Itemize
Each reaction computes a 
\begin_inset Quotes eld
\end_inset

molecule-valued
\begin_inset Quotes erd
\end_inset

 
\series bold
expression
\end_layout

\begin_layout Itemize
Results of computation are injected back into the soup
\end_layout

\begin_layout Itemize
Reactions start asynchronously after injecting initial molecules
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham2.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
def
\begin_inset space ~
\end_inset

 a(x) & b(y) =
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 let z = (big_function x y) in a(z)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
and
\begin_inset space ~
\end_inset

 a(x) & c() = (print_int x; 0);;
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

When reaction starts: input molecules disappear, expression is computed,
 output molecules are injected
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus in a nutshell
\end_layout

\begin_layout FrameSubtitle
More features of JoCaml
\end_layout

\begin_layout Itemize
Mutual recursion:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def a(x) = a(x+1) & b(x+2) and b(x) & c(y) = a(x+y)
\end_layout

\begin_layout Itemize
Pattern-matching on molecule's payload values:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def a(Some x) & b(y) = b(x+y) or a(None) & b(y) = b(y)
\end_layout

\begin_layout Itemize

\series bold
Instant
\series default
 molecules (same type as function calls):
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def a(x) & f() = a(x+1) & reply x to f
\end_layout

\begin_layout Itemize

\series bold
Local
\series default
 molecules and reactions: 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def c(n) = ( if n>0 then c(n-1) else 0 ) in
\begin_inset space ~
\end_inset

 spawn c(10)
\end_layout

\begin_layout Itemize
Injection as side-effect: 
\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset

 let x=3 in (spawn a(x); printf 
\begin_inset Quotes eld
\end_inset

%d
\backslash
n
\begin_inset Quotes erd
\end_inset

 x)
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Itemize

\series bold
Molecule
\series default
 
\series bold
constructors
\series default
 are defined as values and can be manipulated:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
# def a(x) = Printf.printf 
\begin_inset Quotes eld
\end_inset

%d
\backslash
n
\begin_inset Quotes erd
\end_inset

 x; 0;;
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val a : int Join.chan = <abstr>
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
# def b(m,y) = Printf.printf 
\begin_inset Quotes eld
\end_inset

injecting m(%d)
\backslash
n
\begin_inset Quotes erd
\end_inset

 y; m(y);;
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val b: (int Join.chan * int) Join.chan = <abstr>
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus: Examples
\end_layout

\begin_layout FrameSubtitle
Options, Futures, and Map/Reduce
\end_layout

\begin_layout Standard
Future with synchronous poll (
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
get
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

):
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
# def fut(f,x) = let res = f x in finished(res)
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset

 and get() & finished(res) = reply res to get;;
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val get : unit -> '_a = <fun>
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val finished : '_a Join.chan = <abstr>
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val fut : (('a -> '_b) * 'a) Join.chan = <abstr>
\end_layout

\begin_layout Standard
Future with synchronous callback:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def fut(f,x,c) = let res = f x in ( c(res); finished(res) )
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset

 and get() & finished(res) = reply res to get
\end_layout

\begin_layout Standard
Future with asynchronous callback:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def fut(f,x,m) = let res = f x in ( m(res) & finished(res) )
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset

 and get() & finished(res) = reply res to get
\end_layout

\begin_layout Itemize
Exercise: implement a 
\begin_inset Quotes eld
\end_inset

future with cancellable callback
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus: Examples
\end_layout

\begin_layout FrameSubtitle
Options, Futures, and Map/Reduce
\end_layout

\begin_layout Standard
Asynchronous counter:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
# def inc() & c(n) = c(n+1) 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
or get() & c(n) = reply n to get & c(n);; 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
val inc : unit Join.chan = <abstr> 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
val get : unit -> int = <fun> 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
val c : int Join.chan = <abstr> 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
# spawn c(0) & inc() & inc() & inc();; 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
- : unit = () 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
# get();; 
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
- : int = 3 
\end_layout

\begin_layout Standard
Map/Reduce:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
def res(list) & c(s) = res (s::list) or get() & res(list) = reply list to
 get;;
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
spawn res([]);;
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
List.map (fun x-> spawn c(x*2)) [1; 2; 3];;
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
get();; (* this returned [4; 6; 2] in one test *)
\end_layout

\begin_layout Itemize
Exercise: implement a concurrent 
\begin_inset Quotes eld
\end_inset

fold
\begin_inset Quotes erd
\end_inset

 (e.g.
 sum of int list)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Join Calculus: Examples
\end_layout

\begin_layout FrameSubtitle
Five Dining Philosophers
\end_layout

\begin_layout Standard
Philosophers 
\size scriptsize
\color blue
A
\family typewriter
, 
\family default
B
\family typewriter
, 
\family default
C
\family typewriter
, 
\family default
D
\family typewriter
, 
\family default
E
\size default
\color inherit
; forks 
\family typewriter
\size scriptsize
\color blue
fAB, fBC, fCD, fDE, fEA
\family default
\size default
\color inherit
.
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
let report(message) = Printf.printf 
\begin_inset Quotes eld
\end_inset

%s
\backslash
n
\begin_inset Quotes erd
\end_inset

 message;
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
                           Unix.sleep (Random.int 3600) ;;
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
def hA() & fEA() & fAB() = report(
\begin_inset Quotes eld
\end_inset

A is eating
\begin_inset Quotes erd
\end_inset

); tA() & fEA() & fAB() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
or  hB() & fAB() & fBC() = report(
\begin_inset Quotes eld
\end_inset

B is eating
\begin_inset Quotes erd
\end_inset

); tB() & fAB() & fBC() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
or  hC() & fBC() & fCD() = report(
\begin_inset Quotes eld
\end_inset

C is eating
\begin_inset Quotes erd
\end_inset

); tC() & fBC() & fCD() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
or  hD() & fCD() & fDE() = report(
\begin_inset Quotes eld
\end_inset

D is eating
\begin_inset Quotes erd
\end_inset

); tD() & fCD() & fDE() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
or  hE() & fDE() & fEA() = report(
\begin_inset Quotes eld
\end_inset

E is eating
\begin_inset Quotes erd
\end_inset

); tE() & fDE() & fEA() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
and tA() = report(
\begin_inset Quotes eld
\end_inset

A is thinking
\begin_inset Quotes erd
\end_inset

); hA() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
and tB() = report(
\begin_inset Quotes eld
\end_inset

B is thinking
\begin_inset Quotes erd
\end_inset

); hB() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
and tC() = report(
\begin_inset Quotes eld
\end_inset

C is thinking
\begin_inset Quotes erd
\end_inset

); hC() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
and tD() = report(
\begin_inset Quotes eld
\end_inset

D is thinking
\begin_inset Quotes erd
\end_inset

); hD() 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
and tE() = report(
\begin_inset Quotes eld
\end_inset

E is thinking
\begin_inset Quotes erd
\end_inset

); hE() ;; 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
spawn fAB() & fBC() & fCD() & fDE() & fEA()
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
     & tA() & tB() & tC() & tD() & tE() ;; 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Limitations and restrictions of Join Calculus
\end_layout

\begin_layout FrameSubtitle
Less is more!
\end_layout

\begin_layout Itemize
Reactions are defined 
\series bold
statically
\series default
 and with 
\series bold
local scope
\series default
:
\end_layout

\begin_deeper
\begin_layout Itemize
no molecules with computed names: 
\family typewriter
\size scriptsize
\color blue

\begin_inset Newline newline
\end_inset

a(x) & molecule_named(
\begin_inset Quotes eld
\end_inset

b
\begin_inset Quotes erd
\end_inset

)(x) = (not allowed!)
\end_layout

\begin_layout Itemize
cannot dynamically add a new reaction to a previously defined molecule:
\family typewriter
\size scriptsize
\color blue

\begin_inset Newline newline
\end_inset

def a(x) & b(y) = ...
 ;;
\begin_inset Newline newline
\end_inset

def b(y) & c(z) = ...
 shadows the old definition of b()!
\end_layout

\end_deeper
\begin_layout Itemize
No 
\begin_inset Quotes eld
\end_inset

guard conditions
\begin_inset Quotes erd
\end_inset

 for reactions:
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
def a(x) & b(y) & start_if (x==y) = ...
 (not allowed!)
\end_layout

\begin_layout Itemize
No duplicated input values: 
\family typewriter
\size scriptsize
\color blue
a(x) & b(x) = (not allowed!)
\end_layout

\begin_layout Itemize
No duplicated input molecules: 
\family typewriter
\size scriptsize
\color blue
a(x) & a(y) = (not allowed!)
\end_layout

\begin_layout Itemize
No way to test dynamically for the presence/absence of a molecule!
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
def a(x) & b(y) = if have_molecules(c & d) then ...
 else ...
 (not allowed!)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Limitations and restrictions of Join Calculus
\end_layout

\begin_layout FrameSubtitle
It seems they do not limit the expressive power!
\end_layout

\begin_layout Standard
What if we 
\emph on
need
\emph default
 a reaction with pairs of molecules?
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
a(x) & a(y) = a(x+y) 
\end_layout

\begin_layout Itemize
Solution: use two "
\family typewriter
\size scriptsize
\color blue
or
\family default
\size default
\color inherit
"-coupled reactions with new molecules 
\family typewriter
\size scriptsize
\color blue
a'
\family default
\size default
\color inherit
 and 
\family typewriter
\size scriptsize
\color blue
b
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Standard

\family typewriter
\size scriptsize
\color blue
def a(x) & b() = a'(x) or a(x) & a'(y) = whatever(x,y) 
\end_layout

\begin_layout Itemize
Make sure that one 
\family typewriter
\size scriptsize
\color blue
b()
\family default
\size default
\color inherit
 is injected together with each 
\family typewriter
\size scriptsize
\color blue
a(x)
\end_layout

\begin_layout Standard
Questions:
\end_layout

\begin_layout Itemize
Can we prevent the error of not injecting 
\family typewriter
\size scriptsize
\color blue
b()
\family default
\size default
\color inherit
?
\end_layout

\begin_layout Itemize
Can we do a reaction with 
\begin_inset Formula $n$
\end_inset

 molecules, where 
\begin_inset Formula $n$
\end_inset

 is dynamic?
\end_layout

\begin_layout Itemize
Can we do 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $n$
\end_inset

 dining philosophers
\begin_inset Quotes erd
\end_inset

?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Local scope and recursion
\end_layout

\begin_layout FrameSubtitle
Skeleton code for concurrent merge-sort
\end_layout

\begin_layout Standard
The 
\family typewriter
mergesort
\family default
 molecule:
\end_layout

\begin_layout Itemize
receives the upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sorted_result
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecule
\end_layout

\begin_layout Itemize
defines its own 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sorted
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecule in 
\emph on
local scope
\end_layout

\begin_layout Itemize
emits upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sorted_result
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 when done
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
def mergesort(arr, sorted_result) = 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  if Array.length arr <= 1 then sorted_result(arr)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  else 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   let (part1, part2) = array_split arr
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   in 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   def sorted(x) & sorted'(y) = sorted_result(array_merge x y) 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   in 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   mergesort(part1, sorted) & mergesort(part2, sorted')
\end_layout

\begin_layout Standard
Note  
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sorted(x) & sorted'(y)
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

: need different molecules.
\end_layout

\begin_layout Standard
See tutorial for complete working JoCaml code.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Comparison: Join Calculus vs.
 Actor model
\end_layout

\begin_layout Standard
Reaction 
\begin_inset Formula $\approx$
\end_inset

 actor; molecule 
\begin_inset Formula $\approx$
\end_inset

 message to actor.
\end_layout

\begin_layout Standard
Actors: 
\end_layout

\begin_layout Itemize
need to be created and started explicitly
\end_layout

\begin_layout Itemize
process one message at a time (one actor = one thread)
\end_layout

\begin_layout Itemize
must hold mutable state (e.g.
 for a thread-safe counter)
\end_layout

\begin_layout Itemize
explicitly create and configure other actors 
\end_layout

\begin_layout Standard
Reactions:
\end_layout

\begin_layout Itemize
start when several molecules are available
\end_layout

\begin_layout Itemize
many reactions can start at once, automatically
\end_layout

\begin_layout Itemize
do not need mutable state
\end_layout

\begin_layout Itemize
all reactions are defined statically, but locally scoped
\end_layout

\begin_layout Itemize
simulate actors:
\size scriptsize
\color blue
 def message(m) & actor(state) = actor(compute_new state m)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Implementation of Join Calculus
\end_layout

\begin_layout FrameSubtitle
JC = a DSL + run-time library, or just DSL?
\end_layout

\begin_layout Standard
Implement Join Calculus using Actors (Akka)?
\end_layout

\begin_layout Itemize
Each reaction has 
\begin_inset Formula $1$
\end_inset

 
\begin_inset Quotes eld
\end_inset

monitor actor
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Formula $\geq1$
\end_inset

 
\begin_inset Quotes eld
\end_inset

worker actors
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Monitor receives messages for each 
\begin_inset Quotes eld
\end_inset

spawn
\begin_inset Quotes erd
\end_inset

, keeps track of molecules
\end_layout

\begin_layout Itemize
Monitor starts a worker actor when all molecules are present
\end_layout

\begin_layout Itemize
Monitors have to talk to competing monitors - 
\begin_inset Quotes eld
\end_inset

use up
\begin_inset Quotes erd
\end_inset

 molecules
\end_layout

\begin_deeper
\begin_layout Itemize
but all competitions are statically defined!
\end_layout

\end_deeper
\begin_layout Itemize
Monitors / workers need to be locally scoped!
\end_layout

\begin_layout Itemize
No globally shared state of the 
\begin_inset Quotes eld
\end_inset

soup
\begin_inset Quotes erd
\end_inset

 is needed!
\end_layout

\begin_layout Itemize
Discuss
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Conclusions and outlook
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Join Calculus
\begin_inset Quotes erd
\end_inset

 is concurrent programming in pure functional style
\end_layout

\begin_layout Itemize
Similar to 
\begin_inset Quotes eld
\end_inset

Actors
\begin_inset Quotes erd
\end_inset

, but more concurrent and 
\begin_inset Quotes eld
\end_inset

more pure
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Very little known, and very little used in practice
\end_layout

\begin_layout Itemize
Existing literature is not suitable as introduction to practical programming
\end_layout

\begin_layout Itemize
My tutorial text is in progress (search Google for 
\begin_inset Quotes eld
\end_inset

tutorial on join calculus
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
