#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[Declarative Concurrency in Join Calculus]{Declarative Concurrent Programming with Join Calculus}
\author{Sergei Winitzki}
\date{October 16, 2017}
\institute[Workday, Inc.]{Scala Bay}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\begin_inset Quotes eld
\end_inset

Join Calculus
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Join calculus
\begin_inset Quotes erd
\end_inset

 is...
\end_layout

\begin_layout Itemize
a 
\emph on
programming language
\emph default
 for concurrent & parallel computations
\end_layout

\begin_layout Itemize
...largely unknown and unused by the software engineering community 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Concurrent & parallel programming is hard
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Imperative concurrency is difficult to reason about:
\end_layout

\begin_layout Itemize
callbacks, threads, semaphores, mutexes, shared mutable state...
\end_layout

\begin_layout Itemize
testing is hard â€“ non-deterministic runtime behavior!
\end_layout

\begin_deeper
\begin_layout Itemize
race conditions, deadlocks, livelocks
\end_layout

\end_deeper
\begin_layout Standard
We try to 
\emph on
avoid
\emph default
 concurrency whenever possible
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Dining philosophers
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The paradigmatic example of concurrency
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Five philosophers sit at a round table"
target "https://en.wikipedia.org/wiki/Dining_philosophers_problem"

\end_inset

, taking turns eating and thinking for random time intervals
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename An_illustration_of_the_dining_philosophers_problem.png
	display false
	height 4cm

\end_inset


\end_layout

\begin_layout Standard
Problem: run the process, avoiding deadlock and starvation
\end_layout

\begin_layout Standard
Solutions: 
\begin_inset CommandInset href
LatexCommand href
name "Rosetta Code"
target "https://rosettacode.org/wiki/Dining_philosophers"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How I learned to forget deadlocks and to love concurrency
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In this talk:
\end_layout

\begin_layout Itemize
Introduction to the 
\begin_inset Quotes eld
\end_inset


\series bold
join calculus
\series default

\begin_inset Quotes erd
\end_inset

 style of concurrency
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Chymyst"
target "https://github.com/chymyst/chymyst-core"

\end_inset

 -- a new Scala implementation
\end_layout

\begin_layout Itemize
Join calculus as an evolution of the Actor model
\end_layout

\begin_layout Itemize
Examples and demos
\end_layout

\begin_layout Standard
Not in this talk: other approaches to declarative concurrency
\end_layout

\begin_layout Itemize
\begin_inset Formula $\pi$
\end_inset

-calculus, PICT language (academic so far)
\end_layout

\begin_layout Itemize

\family typewriter
Erlang's
\family default
 message-passing 
\begin_inset Formula $\approx$
\end_inset

 Akka's 
\begin_inset Quotes eld
\end_inset

Actors
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
CSP / 
\family typewriter
Go
\family default
 language
\end_layout

\begin_layout Itemize
STM (Haskell)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus: A New Hope
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
...and some new hype
\end_layout

\begin_layout Standard
Join calculus is ...
\end_layout

\begin_layout Itemize
...a declarative language for general-purpose concurrency
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

What if actors were stateless, auto-started, and type-safe
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
No threads/semaphores/locks/mutexes/forks, no shared mutable state
\end_layout

\begin_layout Itemize
Concurrency is automatic and 
\emph on
data-driven
\emph default
 (not command-driven)
\end_layout

\begin_layout Itemize
Easier to use than anything I've seen so far!
\end_layout

\begin_layout Standard
Metaphors for join calculus:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

concurrent functions computing with concurrent data
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

chemical soup with molecules and reactions
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus: The Genesis
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
a.k.a.
\begin_inset space ~
\end_inset

the 
\begin_inset Quotes eld
\end_inset

Reflexive Chemical Abstract Machine
\begin_inset Quotes erd
\end_inset

 [
\begin_inset CommandInset href
LatexCommand href
name "Fournet & Gonthier 1996"
target "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.32.3078"

\end_inset

]
\end_layout

\begin_layout Standard
Abstract chemistry:
\end_layout

\begin_layout Itemize
Chemical 
\begin_inset Quotes eld
\end_inset

soup
\begin_inset Quotes erd
\end_inset

 contains many 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
A combination of certain molecules starts a 
\begin_inset Quotes eld
\end_inset

chemical reaction
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Quotes eld
\end_inset

Chemical laws
\begin_inset Quotes erd
\end_inset

:
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
a + b 
\begin_inset Formula ${\color{blue}\rightarrow}$
\end_inset

 a
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
a + c 
\begin_inset Formula ${\color{blue}\rightarrow}$
\end_inset

 
\begin_inset Formula ${\color{blue}\emptyset}$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham1a.eps
	width 100col%

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
Define molecules 
\family typewriter
\size scriptsize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
b
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
c
\family default
\size default
\color inherit
, ...
 and arbitrary chemical laws
\end_layout

\begin_layout Itemize
Emit some molecules into the 
\begin_inset Quotes eld
\end_inset

soup
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
The runtime system evolves the soup 
\emph on
concurrently
\emph default
 and 
\emph on
in parallel
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus in a Nutshell
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

Better concurrency through chemistry
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Translating the 
\begin_inset Quotes eld
\end_inset

chemical metaphor
\begin_inset Quotes erd
\end_inset

 into practice:
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Itemize
Each molecule carries a 
\series bold
value
\series default
 (
\begin_inset Quotes eld
\end_inset

concurrent data
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Each reaction computes a 
\begin_inset Quotes eld
\end_inset

molecule-set-valued
\begin_inset Quotes erd
\end_inset

 expression from input values
\end_layout

\begin_layout Itemize
Resulting molecules are emitted back into the soup
\end_layout

\begin_layout Itemize
Whenever input molecules are available, reactions start concurrently and
 in parallel
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham2.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
site(
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 go { case 
\series bold
a
\series default
(x) + 
\series bold
b
\series default
(y) 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

val z = compute_z(x,y); 
\series bold
a
\series default
(z) },
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 go { case 
\series bold
a
\series default
(x) + 
\series bold
c
\series default
(_) 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 println(x) } )
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

When a reaction starts: input molecules disappear, expression is computed,
 output molecules are emitted
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
First example: concurrent counter
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Chemical laws:
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + decr() 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n - 1)
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + incr() 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n + 1)
\end_layout

\begin_layout Standard
Initial molecules:
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(0)
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Data stays on the molecules
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
We may emit 
\size scriptsize
\color blue
decr()
\size default
\color inherit
 and 
\size scriptsize
\color blue
incr()
\size default
\color inherit
 concurrently
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Concurrent data and concurrent functions
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Towards a more declarative view
\end_layout

\begin_layout Standard
Molecule with value 
\begin_inset Formula $\approx$
\end_inset

 data lifted into the concurrent world
\end_layout

\begin_layout Standard
Reaction 
\begin_inset Formula $\approx$
\end_inset

 function lifted into the concurrent world
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + add(x) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n + x)
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + incr() 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n + 1)
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + get(result)
\family typewriter
 
\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n) + result(n)
\end_layout

\begin_layout Standard
State of the chemical soup:
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(0) + incr() + incr() + add(10)
\end_layout

\begin_layout Standard
Reaction consumes molecules 
\begin_inset Formula $\approx$
\end_inset

 function consumes input values
\end_layout

\begin_layout Standard
Reaction emits molecules 
\begin_inset Formula $\approx$
\end_inset

 function returns result values
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: basic features
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Molecule emitters, reaction definitions
\end_layout

\begin_layout Standard
Define 
\series bold
molecule
\series default
 
\series bold
emitters
\series default
:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val counter = m[Int]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val decr = m[Unit]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val incr = m[Unit]
\end_layout

\begin_layout Standard
Declare some 
\series bold
reactions
\series default
 using the known molecules:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val r0 = go { case counter(n) + decr(_) 
\begin_inset Formula $\Rightarrow$
\end_inset

 counter(n-1) }
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val r1 = go { case counter(n) + incr(_) 
\begin_inset Formula $\Rightarrow$
\end_inset

 counter(n+1) }
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
Activate a 
\begin_inset Quotes eld
\end_inset


\series bold
reaction site
\series default

\begin_inset Quotes erd
\end_inset

 and emit some molecules:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
site(r0, r1)
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
counter(10)
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// non-blocking side-effect
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
incr()
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// ditto; we will have
\family typewriter
 counter(11)
\family default
 later
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
incr()
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// we will have 
\family typewriter
counter(12)
\family default
 later
\end_layout

\begin_layout Itemize
Calling 
\family typewriter
\size scriptsize
\color blue
counter(10)
\family default
\size default
\color inherit
 returns 
\family typewriter
\size scriptsize
\color blue
Unit
\family default
\size default
\color inherit
 and emits a molecule as a side-effect
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: more features
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Blocking vs.
\begin_inset space ~
\end_inset

non-blocking molecules
\end_layout

\begin_layout Standard

\series bold
Non-blocking
\series default
 molecules:
\end_layout

\begin_layout Itemize
emitter 
\emph on
does not wait
\emph default
 until a reaction starts with the new molecule
\end_layout

\begin_layout Standard

\series bold
Blocking
\series default
 molecules:
\end_layout

\begin_layout Itemize
emitter will block until a reaction starts and sends a 
\begin_inset Quotes eld
\end_inset

reply value
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
molecule implicitly carries a pseudo-emitter for 
\begin_inset Quotes eld
\end_inset

reply
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
when the 
\begin_inset Quotes eld
\end_inset

reply
\begin_inset Quotes erd
\end_inset

 is emitted, the value will be returned to caller
\end_layout

\begin_layout Itemize
Example:
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
f(x, replyToF) + c(y) 
\begin_inset Formula $\Rightarrow$
\end_inset

 val z = ...; replyToF(z) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Counter with blocking access
\end_layout

\begin_layout Standard
Blocking molecule 
\family typewriter
\size scriptsize
\color blue
getN
\family default
\size default
\color inherit
 reads the value 
\family typewriter
\size scriptsize
\color blue
x
\family default
\size default
\color inherit
 in 
\family typewriter
\size scriptsize
\color blue
counter(x)
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val getN = b[Unit, Int]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// revise the join definition, appending this reaction:
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
...
 val r2 = go { case counter(x) + getN(_, reply) 
\begin_inset Formula $\Rightarrow$
\end_inset

 reply(x) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
site(r0, r1, r2)
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// Emit non-blocking molecules as before...
 
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// Now emit the blocking molecule:
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val x = getN()
\family default
\size footnotesize
\color gray
 // blocking call, returns 
\family typewriter
Int
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "CounterSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/CounterSpec.scala"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Options, Futures, and Map/Reduce
\end_layout

\begin_layout Standard
Implement Future with blocking poll (
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
get
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

):
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case get(_, reply) 
\begin_inset Formula $\Rightarrow$
\end_inset

 val x = f(); reply(x) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Implement Map/Reduce:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case c(x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 d(x * 2) } 
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case res(list) + d(s) 
\begin_inset Formula $\Rightarrow$
\end_inset

 res(s ::
\begin_inset space ~
\end_inset

list) } 
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case get(_, reply) + res(list) 
\begin_inset Formula $\Rightarrow$
\end_inset

 reply(list) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
res(Nil)
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
Seq(1,2,3).foreach(x 
\begin_inset Formula $\Rightarrow$
\end_inset

 c(x))
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
get()
\family default
\size footnotesize
\color gray
 // this returned Seq(4,6,2) in one test
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "FutureSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/FutureSpec.scala"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Five Dining Philosophers
\end_layout

\begin_layout Standard
Philosophers 
\family typewriter
\size scriptsize
\color blue
1, 2, 3, 4, 
\family default
5
\size default
\color inherit
 and forks 
\family typewriter
\size scriptsize
\color blue
f12, f23, f34, f45, f51
\end_layout

\begin_layout LyX-Code

\family sans
\size footnotesize
\color gray
// ...
 some definitions omitted for brevity
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
site (
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case t1(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(1); h1() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case t2(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(2); h2() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case t3(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(3); h3() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case t4(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(4); h4() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case t5(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(5); h5() },
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case h1(_) + f12(_) + f51(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(1); t1() + f12() + f51() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case h2(_) + f23(_) + f12(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(2); t2() + f23() + f12() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case h3(_) + f34(_) + f23(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(3); t3() + f34() + f23() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case h4(_) + f45(_) + f34(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(4); t4() + f45() + f34() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go{ case h5(_) + f51(_) + f45(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(5); t5() + f51() + f45() }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
t1() + t2() + t3() + t4() + t5()
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
f12() + f23() + f34() + f45() + f51()
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Source code: 
\begin_inset CommandInset href
LatexCommand href
name "DiningPhilosophers.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/main/scala/io/chymyst/talk_examples/DiningPhilosophers.scala"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
From Actors to Join Calculus
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Chemical actors
\begin_inset Quotes erd
\end_inset

 are actors with new requirements:
\end_layout

\begin_layout Enumerate
chemical actors are auto-started and stopped when messages arrive
\end_layout

\begin_layout Enumerate
chemical actors may wait atomically for a 
\emph on
set
\emph default
 of different messages
\end_layout

\begin_layout Enumerate
messages carry statically typed values
\end_layout

\begin_layout Standard
It follows from these requirements that...
 
\end_layout

\begin_layout Itemize
User code declares computations, not actor instances
\end_layout

\begin_layout Itemize
Auto-created actor instances must be stateless
\end_layout

\begin_layout Itemize
Message emitters are 
\emph on
specific to data
\emph default
, not to actor instances:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\size scriptsize
\color blue
// Actors
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val a: ActorRef = ...
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val b: ActorRef = ...
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
a ! 100
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
b ! 1;   b ! 2;   b ! 3
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\size scriptsize
\color blue
site( // Chymyst
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case a(x) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 ...
 }, 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case b(x) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 ...
 })
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
a(100)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
b(1);  b(2);  b(3)
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Itemize
Multiple messages are automatically parallelized
\end_layout

\begin_layout Itemize
Blocking molecules 
\begin_inset Formula $\approx$
\end_inset

 blocking-send: 
\family typewriter
\size scriptsize
\color blue
actorRef ?
\begin_inset space ~
\end_inset

1
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus vs.
 Actor model
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
David vs.
 Goliath?
\end_layout

\begin_layout Itemize
reaction 
\begin_inset Formula $\approx$
\end_inset

 actor
\end_layout

\begin_layout Itemize
emitted molecule 
\begin_inset Formula $\approx$
\end_inset

 message to actor
\end_layout

\begin_layout Standard
Actors: 
\end_layout

\begin_layout Itemize
user code creates and manages explicit actor instances
\end_layout

\begin_layout Itemize
actors will process one message at a time
\end_layout

\begin_layout Itemize
actors typically hold mutable state or mutate 
\begin_inset Quotes eld
\end_inset

behavior
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Reactions:
\end_layout

\begin_layout Itemize
autostart when the required input molecules are available
\end_layout

\begin_layout Itemize
many reactions can start at once, automatically concurrent
\end_layout

\begin_layout Itemize
immutable, stateless, and type-safe
\end_layout

\begin_layout Itemize
all reactions are defined statically, but locally scoped
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Concurrent merge-sort: chemistry pseudocode
\end_layout

\begin_layout Standard
The 
\family typewriter
\size scriptsize
\color blue
mergesort
\family default
\size default
\color inherit
 molecule is 
\begin_inset Quotes eld
\end_inset

recursive
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
receives the upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sortedResult
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecule
\end_layout

\begin_layout Itemize
defines its own 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sorted
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecules in 
\emph on
local scope
\end_layout

\begin_layout Itemize
emits upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
sortedResult
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 when done
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
mergesort( (arr, 
\family typewriter
sortedResult
\family default
) ) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       val (part1, part2) = arr.splitAt(arr.length/2)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       sorted1(x) + sorted2(y) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 
\family typewriter
sortedResult
\family default
( arrayMerge(x,y) )
\end_layout

\begin_layout LyX-Code
   
\end_layout

\begin_layout LyX-Code

\family sans
\size footnotesize
\color gray
       // Emit lower-level 
\family default
mergesort
\family sans
 molecules:
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       mergesort(part1, sorted1) + mergesort(part2, sorted2)
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Concurrent merge-sort: 
\family typewriter
Chymyst
\family default
 code
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val mergesort = m[(Array[T], M[Array[T]])]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
site(
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case mergesort((arr, 
\family typewriter
sortedResult
\family default
)) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
    if (arr.length <= 1) 
\family typewriter
sortedResult
\family default
(arr)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
      else {
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val sorted1 = m[Array[T]]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val sorted2 = m[Array[T]]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        site(
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
          go { case sorted1(x) + sorted2(y) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 
\family typewriter
sortedResult
\family default
(arrayMerge(x,y)) }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        )
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val (part1, part2) = arr.splitAt(arr.length/2)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        
\family sans
\size footnotesize
\color gray
// Emit lower-level 
\family default
mergesort
\family sans
 molecules:
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        mergesort(part1, sorted1) + mergesort(part2, sorted2)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
    }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  })
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "MergeSortSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/MergeSortSpec.scala"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Everything you need to know about JC...
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
...
 but were afraid to ask
\end_layout

\begin_layout Standard
Most descriptions of JC use the 
\begin_inset Quotes eld
\end_inset

message/channel
\begin_inset Quotes erd
\end_inset

 metaphor...
 
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Chemistry
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JC terminology
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Chymyst
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
message on channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a(123)
\family default
\color gray
 // side effect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
emitter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
channel (port) name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
val a : M[Int]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blocking emitter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blocking channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
val q : B[Unit, Int]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reaction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
go { case a(x) + ...
 }
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
emitting a molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sending a message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a(123)
\family default
\color gray
 // side effect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reaction site
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
join definition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
site(r1, r2, ...)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus in the wild
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Previous implementations:
\end_layout

\begin_deeper
\begin_layout Itemize
Funnel [
\begin_inset CommandInset href
LatexCommand href
name "M. Odersky et al., 2000"
target "http://lampwww.epfl.ch/funnel/"

\end_inset

]
\end_layout

\begin_layout Itemize
Join Java [
\begin_inset CommandInset href
LatexCommand href
name "von Itzstein et al., 2001-2005"
target "http://www.vonitzstein.com/Project_JoinJava.html"

\end_inset

]
\end_layout

\begin_layout Itemize
JOCaml  (
\begin_inset CommandInset href
LatexCommand href
name "jocaml.inria.fr"
target "http://jocaml.inria.fr"

\end_inset

) [
\begin_inset CommandInset href
LatexCommand href
name "Fournet et al.Â 2003"
target "http://research.microsoft.com/en-us/um/people/fournet/papers/jocaml-afp4-summer-school-02.pdf"

\end_inset

]
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Join in Scala
\begin_inset Quotes erd
\end_inset

 compiler patch [
\begin_inset CommandInset href
LatexCommand href
name "V. Cremet 2003"
target "http://lampwww.epfl.ch/~cremet/misc/join_in_scala/index.html"

\end_inset

]
\end_layout

\begin_layout Itemize
Joins library for .NET [
\begin_inset CommandInset href
LatexCommand href
name "P. Crusso 2006"
target "http://research.microsoft.com/en-us/um/people/crusso/joins/"

\end_inset

]
\end_layout

\begin_layout Itemize
ScalaJoins [
\begin_inset CommandInset href
LatexCommand href
name "P. Haller 2008"
target "http://lampwww.epfl.ch/~phaller/joins/index.html"

\end_inset

]
\end_layout

\begin_layout Itemize
Joinads (F#, Haskell) [
\begin_inset CommandInset href
LatexCommand href
name "Petricek and Syme 2011"
target "https://www.microsoft.com/en-us/research/publication/joinads-a-retargetable-control-flow-construct-for-reactive-parallel-and-concurrent-programming/"

\end_inset

]
\end_layout

\begin_layout Itemize
ScalaJoin [
\begin_inset CommandInset href
LatexCommand href
name "J. He 2011"
target "https://github.com/Jiansen/ScalaJoin"

\end_inset

]
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CocoaJoin (iOS)"
target "https://github.com/winitzki/CocoaJoin"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "AndroJoin (Android)"
target "https://github.com/winitzki/AndroJoin"

\end_inset

 [S.W.
\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset


\family default
\size default
\color inherit
2013]
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "JEScala"
target "http://guidosalva.github.io/REScala/jescala/"

\end_inset

 [G.
 Salvaneschi 2014]
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Chymyst"
target "https://github.com/chymyst/chymyst-core"

\end_inset

 -- a new JC implementation in Scala (this talk)
\end_layout

\begin_deeper
\begin_layout Itemize
Better syntax, more checks of code sanity
\end_layout

\begin_layout Itemize
(Some) automatic fault tolerance
\end_layout

\begin_layout Itemize
Thread pool and thread priority control
\end_layout

\begin_layout Itemize
Event monitoring and unit testing APIs
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conclusions and outlook
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Join Calculus = declarative, purely functional concurrency
\end_layout

\begin_layout Itemize
Similar to 
\begin_inset Quotes eld
\end_inset

Actors
\begin_inset Quotes erd
\end_inset

, but easier and 
\begin_inset Quotes eld
\end_inset

more purely functional
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Very little known, and very little used in practice
\end_layout

\begin_layout Itemize
A new Scala implementation, 
\begin_inset CommandInset href
LatexCommand href
name "Chymyst"
target "https://github.com/Chymyst/chymyst-core"

\end_inset


\end_layout

\begin_layout Itemize
Documentation: 
\begin_inset CommandInset href
LatexCommand href
name "tutorial book"
target "https://winitzki.gitbooks.io/concurrency-in-reactions-declarative-multicore-in/content/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "draft paper"
target "https://github.com/winitzki/talks/blob/master/join-calculus-paper/join-calculus-paper.pdf"

\end_inset


\end_layout

\begin_layout Itemize
Example code for this talk: 
\begin_inset CommandInset href
LatexCommand href
name "github.com/Chymyst/jc-talk-2017-examples"
target "https://github.com/Chymyst/jc-talk-2017-examples"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
