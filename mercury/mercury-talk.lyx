#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title[An introduction to Mercury]{Logic programming and types: An introduction to Mercury}
\author{Sergei Winitzki}
\date{April 18, 2016}
\institute[SF TTPL]{\emph{SF Types, Theorems, and Programming Languages} meetup}
\definecolor{mybgcolor}{rgb}{0.96,0.98,1}
\setbeamercolor{background canvas}{bg=mybgcolor}
\end_preamble
\options hyperref
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "That scripting language called Prolog"
\pdf_author "Sergei Winitzki, Ph.D."
\pdf_subject "Prolog programming language"
\pdf_keywords "programming languages, Prolog, logic programming"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=black,urlcolor=blue"
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Logic programming as a DSL for logic puzzles (Prolog)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\emph on
\color magenta
All jumping creatures are green.
 All small jumping creatures are martians.
\emph default
\color inherit

\begin_inset Newline newline
\end_inset


\emph on
\color magenta
All green martians are intelligent.
 
\end_layout

\begin_layout Standard

\emph on
\color magenta
Ngtrks is small and green.
 Pgvdrk is a jumping martian.
\end_layout

\begin_layout Standard

\emph on
\color magenta
Who is intelligent?
\emph default
\color inherit
 
\size footnotesize
(inpired by S.
 Lem, 
\emph on
Invasion from Aldebaran
\emph default
)
\size default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\color blue
small(ngtrks).
 green(ngtrks).
\end_layout

\begin_layout LyX-Code

\color blue
martian(pgvdrk).
 jumping(pgvdrk).
\end_layout

\begin_layout LyX-Code

\color blue
green(X) :- jumping(X).
 
\end_layout

\begin_layout LyX-Code

\color blue
martian(X) :- small(X), jumping(X).
 
\end_layout

\begin_layout LyX-Code

\color blue
intelligent(X) :- green(X), martian(X).
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\color blue
?- intelligent(X)
\color inherit
.
\begin_inset Newline newline
\end_inset


\color blue
X = pgvdrk
\end_layout

\begin_layout Itemize
The runtime will perform a backtracking search for a proof
\end_layout

\begin_layout Itemize
Classical logic limited to Horn clauses = executable program
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mercury in a nutshell: a Prolog dialect with static types
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Logical variables, predicates, rules in Prolog-style syntax and semantics
\end_layout

\begin_layout Itemize
Functions as a primitive, on par with predicates
\end_layout

\begin_layout Itemize
Higher-order functions and higher-order predicates
\end_layout

\begin_layout Itemize
Data structures: list, array, hash map; some support for 
\emph on
mutable
\emph default
 data
\end_layout

\begin_layout Itemize
Flexible mode system, type checking, mode and type inference
\end_layout

\begin_layout Itemize
Polymorphic types and type classes
\end_layout

\begin_layout Itemize
Universal and existential type quantifiers
\end_layout

\begin_layout Itemize
Termination and determinism analysis for predicates
\end_layout

\begin_layout Itemize
Multithreading; parallel goals; exceptions
\end_layout

\begin_layout Itemize
Compilation to C, Java, Erlang, .NET
\end_layout

\begin_deeper
\begin_layout Itemize
Interop and type-level compatibility with these environments
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Modes, determinism, types, I/O
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Predicate arguments have 
\series bold
types
\series default
, 
\series bold
modes
\series default
, and 
\series bold
determinism
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Martians
\begin_inset Quotes erd
\end_inset

 requires a declaration of modes & determinism for 
\family typewriter
\color blue
main
\family default
\color inherit
:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
pred main(io::di, io::uo) is cc_multi.
\end_layout

\begin_layout Itemize
Input/output: Special syntax 
\family typewriter
\color blue
!IO
\family default
\color inherit
 means a pair of 
\family typewriter
\color blue
io
\family default
\color inherit
 (
\begin_inset Quotes eld
\end_inset

world
\begin_inset Quotes erd
\end_inset

) values
\end_layout

\begin_layout Itemize
Proof search may backgrack - the goal 
\family typewriter
\color blue
intelligent(X)
\family default
\color inherit
 may fail, so:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
main(!IO) :- ( if intelligent(X) then write(X, !IO)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  else write_string("No solution", !IO) ).
\end_layout

\begin_layout Itemize
Determinism: 
\family typewriter
\size footnotesize
\color blue
det
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
semidet
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
multi
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
nondet
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
failure
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
cc_multi
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
cc_nondet
\end_layout

\begin_layout Itemize
Predefined modes: 
\family typewriter
\size footnotesize
\color blue
in
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
out
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
di
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
uo
\end_layout

\begin_deeper
\begin_layout Itemize
A 
\series bold
mode
\series default
 describes what happens to an LV during proof search:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- mode out == (free >> ground).
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- mode uo == (free >> unique).
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- mode di == (unique >> dead).
\end_layout

\begin_layout Itemize
User-defined modes are possible
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: integer factorial
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Implementation as a predicate:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
:- pred fact(int::in, int::out) is det.
 
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fact(N,F) :- ( if N =< 1 then F = 1 else fact(N-1, A), F = A*N ).
\end_layout

\begin_layout Itemize
Implementation as a function:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
:- func fct(int) = int.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fct(N) = ( if N =< 1 then 1 else N*fct(N-1) ).
\end_layout

\begin_layout Itemize
The generated code is 
\emph on
identical
\emph default
 in both cases!
\end_layout

\begin_deeper
\begin_layout Itemize
However, predicates are 
\series bold
not
\series default
 
\begin_inset Quotes eld
\end_inset

functions returning Boolean
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Type/mode/deteterminism are inferred and statically checked
\end_layout

\begin_layout Itemize

\emph on
Order of goals
\emph default
 is inferred from modes rather than from code!
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fact1(N,F) :- ( if N =< 1 then F = 1 else fact(N-1, A), F = A*N ).
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fact2(N,F) :- ( if N =< 1 then F = 1 else F = A*N, fact(N-1, A) ).
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Static determinism analysis
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Compilation fails if we define the predicate by writing two clauses:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
:- pred fact(int::in, int::out) is det.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fact(1,1).
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
fact(N,F) :- fact(N-1, A), F = A*N.
\end_layout

\begin_layout Itemize
Error message:
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
In `fact'(in, out): error: determinism declaration not satisfied.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
Declared `det', inferred `multi'.
\end_layout

\begin_layout LyX-Code

\family typewriter
\size scriptsize
\color blue
Disjunction has multiple clauses with solutions.
\end_layout

\begin_layout Itemize
Similar error when defining a 
\emph on
function
\emph default
 by clauses:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
Error: invalid determinism for `fct'(in) = out:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
the primary mode of a function cannot be `multi'.
\end_layout

\begin_layout Itemize
This is why we need to use a less readable 
\family typewriter
\size footnotesize
\color blue
if-then-else
\family default
\size default
\color inherit
 construct
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Functions and expressions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Functions are deterministic predicates with 
\begin_inset Quotes eld
\end_inset

in-out
\begin_inset Quotes erd
\end_inset

 mode
\end_layout

\begin_layout Itemize
Expressions are syntactic sugar for goals involving functions
\end_layout

\begin_layout Itemize
Hence, the general syntax for functions:
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
fname(Arg1, Arg2, ...) = Result :- goal, goal, ..., Result = ...
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Lambda
\begin_inset Quotes erd
\end_inset

 predicate terms and function terms:
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
F1 = ( pred(N::in, X::out) is det :- fact(N, X) ).
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
F2 = fact .
 
\emph on
% same value as F1 by 
\begin_inset Formula $\eta$
\end_inset

-equivalence
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
F3 = ( func(N) = X :-  X = fct(N) ).
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
F4 = fct.
   
\emph on
% same value as F3 by 
\begin_inset Formula $\eta$
\end_inset

-equivalence
\end_layout

\begin_layout Itemize
Higher-order predicates:
\begin_inset Newline newline
\end_inset


\color blue

\begin_inset space ~
\end_inset


\family typewriter
\size footnotesize
map(fact, [1,3,5], Res)
\family default
\size default
\color inherit
 will unify 
\family typewriter
\size footnotesize
\color blue
Res
\family default
\size default
\color inherit
 with 
\family typewriter
\size footnotesize
\color blue
[1,6,120]
\end_layout

\begin_deeper
\begin_layout Itemize
Declaring higher-order predicate modes is verbose and complicated
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Algebraic types and polymorphism
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Primitive types: 
\family typewriter
\size footnotesize
\color blue
bool
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
int
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
float
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
\color blue
string
\end_layout

\begin_deeper
\begin_layout Itemize
No 
\begin_inset Quotes eld
\end_inset

symbol literals
\begin_inset Quotes erd
\end_inset

 as in Prolog
\end_layout

\end_deeper
\begin_layout Itemize
Predicate types, function types
\end_layout

\begin_deeper
\begin_layout Itemize
Type syntax: 
\family typewriter
\size footnotesize
\color blue
pred(int::in, int::out)
\family default
\size default
\color inherit
 and 
\family typewriter
\size footnotesize
\color blue
func(int) = int
\end_layout

\end_deeper
\begin_layout Itemize
Tuples, unions
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
:- type mytype3 ---> point({int,int},string); ok(string); failed.
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
:- type list(T) ---> []; [ T | list(T) ].

\emph on
 % special syntax
\family default
\size default
\emph default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
:- type tree(T) ---> leaf; branch(tree(T), T, tree(T)).
\end_layout

\begin_layout Itemize
Records with accessors
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
:- type employee ---> employee(name :: string, id :: int).
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
X = employee(...), if X ^ name = "myself" then ...
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: 
\begin_inset Quotes eld
\end_inset

reversible computation
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Convert integers between unary encoding and native representation
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- type unary ---> z; s(unary).
 
\emph on
%   z;  s(z);  s(s(z));  etc.
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- pred unary_int(unary, int).
 
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- mode unary_int(in, out).
 
\emph on
% is det.
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- mode unary_int(out, in).
 
\emph on
% is multi.
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
unary_int(C, N) :- (
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  C = z, N = 0 ;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  C = s(B), N = M+1, unary_int(B, M)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\emph on
\color blue
% goals will be reordered here depending on mode!
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
).
\end_layout

\begin_layout Itemize
The same code can unify 
\size footnotesize
\color blue
unary_int(s(s(z)), N) 
\size default
\color inherit
or 
\size footnotesize
\color blue
unary_int(C, 3) 
\end_layout

\begin_deeper
\begin_layout Itemize
Determinism and mode of predicates is inferred from use!
\end_layout

\begin_layout Itemize

\emph on
Different code
\emph default
 is compiled for each declared mode of 
\size footnotesize
\color blue
unary_int(C, N)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Type classes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
`a la
\end_layout

\end_inset

 Haskell
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A type class defines a set of predicates and functions
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- typeclass showable(T) where [
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  pred show(T::in, io::di, io::uo) is det
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
].
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- instance showable(int) where [
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  pred(show/3) is io.write_int
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
].
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- instance showable(list(T)) <= showable(T) where [ 
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  pred(show/3) is show_list
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
].
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- pred show_list(list(T), io, io) <= showable(T).
 
\emph on
% define it now
\end_layout

\begin_layout Itemize
The methods of a typeclass are resolved at compile time
\end_layout

\begin_deeper
\begin_layout Itemize
Only one instance declaration per type (as in Haskell)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
No higher-kinded types
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Can we define a 
\begin_inset Quotes eld
\end_inset

functor
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

monad
\begin_inset Quotes erd
\end_inset

 typeclass? (No!)
\end_layout

\begin_deeper
\begin_layout Itemize
Typeclasses must be parameterized by simple types
\end_layout

\begin_layout Itemize
Instances are for concrete types or concrete type constructors
\end_layout

\end_deeper
\begin_layout Itemize
Cannot parameterize a typeclass by an unknown type constructor
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- typeclass functor(A,B, FA,FB) where [
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  func fmap(func(A)=B) = (func(FA)=FB)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
].
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
:- instance functor(A, B, list(A), list(B))
\shape italic
 % fails to compile!
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
where [
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
   fmap(F::(func(A)=B)) = (func(L) = FL :- FL = map(F, L))
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
].
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Limitations of Mercury
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
No higher-kind type constructors
\end_layout

\begin_deeper
\begin_layout Itemize
(e.g.
\begin_inset space ~
\end_inset

cannot define 
\begin_inset Quotes eld
\end_inset

functor
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

monad
\begin_inset Quotes erd
\end_inset

 typeclasses)
\end_layout

\end_deeper
\begin_layout Itemize
No row polymorphism for records
\end_layout

\begin_layout Itemize
No partially instantiated values (e.g.
\begin_inset space ~
\end_inset

no difference lists)
\end_layout

\begin_deeper
\begin_layout Itemize
Queues and other data types are provided by standard library
\end_layout

\end_deeper
\begin_layout Itemize
No 
\begin_inset Quotes eld
\end_inset

cut
\begin_inset Quotes erd
\end_inset

 operator
\end_layout

\begin_layout Itemize
No REPL or interactive queries
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
How to unite "logic programming" and "functional programming"
\end_layout

\begin_layout Itemize
Mercury = Prolog + modes + types
\end_layout

\begin_layout Itemize
Functions are predicates, and predicates are functions!
\end_layout

\begin_layout Itemize
For more info on Mercury: 
\begin_inset CommandInset href
LatexCommand href
name "Features of the Mercury programming language (online link)"
target "http://www.mercurylang.org/information/features.html"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
