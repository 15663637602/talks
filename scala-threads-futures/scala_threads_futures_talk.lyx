#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\title{Scala \texttt{Thread}s and \texttt{Future}s}
\author{Sergei Winitzki}
\date{September 26, 2017}
\institute[Workday, Inc.]{Workday, Inc.}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
JVM threads
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Java 
\family typewriter
\size small
\color blue
Thread
\family default
\size default
\color inherit
 API: low-level and underpowered
\end_layout

\begin_layout Itemize
user code must create/maintain threads
\end_layout

\begin_layout Itemize
cannot reuse one thread for running different tasks
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

heavy
\begin_inset Quotes erd
\end_inset

: cannot create more than about 2,000 JVM threads
\end_layout

\begin_layout Itemize
difficult to synchronize across threads correctly (
\family typewriter
\size small
\color blue
wait
\family default
\size default
\color inherit
 / 
\family typewriter
\size small
\color blue
notify
\family default
\size default
\color inherit
 / 
\family typewriter
\size small
\color blue
synchronized
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Itemize
exceptions on a thread are invisible
\end_layout

\begin_layout Standard
Plain C multithreading was essentially just as hard
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
ThreadPoolExecutor
\family default
 = thread pool + task queue
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Java 
\family typewriter
\size small
\color blue
ThreadPoolExecutor
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Itemize
has a queue of pending tasks
\end_layout

\begin_layout Itemize
runs tasks on a dynamically managed thread pool
\end_layout

\begin_layout Itemize
reuses threads for different tasks
\end_layout

\begin_layout Itemize
Fork/Join executor: additional facilities for synchronization
\end_layout

\begin_layout Itemize
cannot be restarted after shutdown
\end_layout

\begin_layout Standard
Main pattern of usage:
\end_layout

\begin_layout Itemize
Run a large number of short tasks on a small, fixed number of threads
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Usages of thread pools
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size small
\color blue
scala.concurrent.ExecutionContext
\family default
\size default
\color inherit
 is a wrapper over a thread pool
\end_layout

\begin_layout Itemize

\family typewriter
\size small
\color blue
akka.actor.ActorSystem
\family default
\size default
\color inherit
 contains a thread pool
\end_layout

\begin_layout Itemize
Apache's 
\family typewriter
\size small
\color blue
HttpAsyncClient
\family default
\size default
\color inherit
 contains a thread pool
\end_layout

\begin_layout Itemize
Scala's 
\family typewriter
\size small
\color blue
Future[T]
\family default
\size default
\color inherit
 operations (
\family typewriter
\size small
\color blue
Future()
\family default
\size default
\color inherit
, 
\family typewriter
\size small
\color blue
map
\family default
\size default
\color inherit
,
\family typewriter
\size small
\color blue
 flatMap
\family default
\size default
\color inherit
) need an implicit 
\family typewriter
\size small
\color blue
ExecutionContext
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
First look at 
\family typewriter
scala.concurrent.Future
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Main features of 
\family typewriter
\size small
\color blue
scala.concurrent.Future
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

value semantics
\begin_inset Quotes erd
\end_inset

 
\begin_inset Newline newline
\end_inset


\family typewriter
\size small
\color blue
val f:
\begin_inset space ~
\end_inset

Future[T]
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset

– represents a value (of type 
\family typewriter
\size small
\color blue
T
\family default
\size default
\color inherit
) that 
\emph on
will
\emph default
 
\emph on
become available
\emph default
 in the future
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

container semantics
\begin_inset Quotes erd
\end_inset

: covariant, has 
\family typewriter
\size small
\color blue
map
\family default
\size default
\color inherit
 and 
\family typewriter
\size small
\color blue
flatMap
\end_layout

\begin_layout Itemize
error handling and failure recovery
\end_layout

\begin_layout Itemize
use 
\family typewriter
\size small
\color blue
scala.concurrent.Promise[T]
\family default
\size default
\color inherit
 to convert callback APIs to 
\family typewriter
\size small
\color blue
Future[T]
\end_layout

\begin_layout Standard

\size footnotesize
Note: 
\family typewriter
java.util.concurrent.Future
\family default
 is just a callback wrapper class
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How does a 
\family typewriter
Future
\family default
 run?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size small
\color blue
implicit ec = somebody.giveMeExecContextPlease()
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
val f:
\begin_inset space ~
\end_inset

Future[Array[Float]] = Future { long_computation() }
\family default

\begin_inset Newline newline
\end_inset


\family typewriter
logger.info(
\begin_inset Quotes eld
\end_inset

Long computation started
\begin_inset Quotes erd
\end_inset

)
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Getting a 
\family typewriter
\size small
\color blue
Future[T]
\family default
\size default
\color inherit
 value means:
\end_layout

\begin_layout Itemize
a task was queued on that 
\emph on
somebody's
\emph default
 thread pool
\end_layout

\begin_layout Itemize
we could get the result value when it becomes available
\end_layout

\begin_layout Itemize
we have no way of knowing when that will happen
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How does 
\family typewriter
map
\family default
 work on a 
\family typewriter
Future
\family default
?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size small
\color blue
implicit ec = somebody.giveMeExecContextPlease()
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
val f:
\begin_inset space ~
\end_inset

Future[Array[Float]] = ...
\family default

\begin_inset Newline newline
\end_inset


\family typewriter
logger.info(
\begin_inset Quotes eld
\end_inset

Long computation started
\begin_inset Quotes erd
\end_inset

)
\begin_inset Newline newline
\end_inset

val s:
\begin_inset space ~
\end_inset

Future[Int] = f.map(_.length)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
using 
\family typewriter
map
\family default
 requires an 
\family typewriter
\size small
\color blue
ExecutionContext
\end_layout

\begin_layout Itemize
the new computation (
\family typewriter
\size small
\color blue
_.length
\family default
\size default
\color inherit
) will run once the array is ready
\end_layout

\begin_layout Itemize
the new computation may run on another thread!
\end_layout

\begin_layout Itemize

\family typewriter
\size small
\color blue
flatMap
\family default
\size default
\color inherit
 also works: 
\family typewriter
\size small
\color blue
Future[Future[T]]
\family default
\size default
\color inherit
 can be 
\begin_inset Quotes eld
\end_inset

flattened
\begin_inset Quotes erd
\end_inset

 to 
\family typewriter
\size small
\color blue
Future[T]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How to work with APIs returning a 
\family typewriter
Future
\family default
?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
get an 
\family typewriter
\size small
\color blue
ExecutionContext
\family default
\size default
\color inherit
 (e.g.
 
\family typewriter
\size small
\color blue
actorSystem.dispatcher
\family default
\size default
\color inherit
)
\end_layout

\begin_layout Itemize
use 
\family typewriter
\size small
\color blue
map
\family default
\size default
\color inherit
 or 
\family typewriter
\size small
\color blue
flatMap
\family default
\size default
\color inherit
 to specify computations to be done in the future
\end_layout

\begin_layout Itemize
return another 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 value
\end_layout

\begin_layout Itemize
avoid using 
\family typewriter
\size small
\color blue
Await.result
\family default
\size default
\color inherit
 if you can
\end_layout

\begin_layout Standard
With modern libraries, no need to wait!
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Examples:
\end_layout

\begin_layout Itemize
Akka-Streaming accepts a 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 value inside 
\family typewriter
\size small
\color blue
mapAsync
\end_layout

\begin_layout Itemize
Akka-HTTP accepts a 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 value inside an HTTP route
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How to convert callback APIs into a 
\family typewriter
Future
\family default
?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
create a
\family typewriter
 
\size small
\color blue
Promise[T]
\family default
\size default
\color inherit
 value:
\begin_inset Newline newline
\end_inset


\family typewriter
\size small
\color blue
val p = Promise[Int]()
\end_layout

\begin_layout Itemize
in the callback's body, resolve the promise:
\begin_inset Newline newline
\end_inset


\family typewriter
\size small
\color blue
p.success(123)
\end_layout

\begin_layout Itemize
return a 
\size small
\color blue
Future[T]
\size default
\color inherit
 value using the promise value:
\begin_inset Newline newline
\end_inset


\family typewriter
\size small
\color blue
p.future 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Converting Apache's 
\family typewriter
HttpAsyncClient
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Converting Apache's 
\family typewriter
\size small
\color blue
HttpAsyncClient
\family default
\size default
\color inherit
 into a 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
-based API
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
val client:
\begin_inset space ~
\end_inset

CloseableHttpAsyncClient =
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 HttpAsyncClientBuilder.(....).build()
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
val promise = Promise[HttpResponse]()
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
client.execute(request, new FutureCallback[HttpResponse] {
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 override def cancelled():
\begin_inset space ~
\end_inset

Unit =
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 promise.failure(new CancellationException())
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 override def completed(resp:
\begin_inset space ~
\end_inset

HttpResponse):
\begin_inset space ~
\end_inset

Unit =
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 promise.success(resp)
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset

 override def failed(ex:
\begin_inset space ~
\end_inset

Exception):
\begin_inset space ~
\end_inset

Unit = promise.failure(ex) 
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
})
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
val responseFuture = promise.future
\end_layout

\begin_layout Standard

\family typewriter
\size small
\color blue
// The new API will return this.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Mistakes were made
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Typical 
\begin_inset Quotes eld
\end_inset

gotchas
\begin_inset Quotes erd
\end_inset

 when using 
\family typewriter
\size small
\color blue
scala.concurrent.Future
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Itemize
unnecessarily waiting for futures to complete – blocked threads
\end_layout

\begin_layout Itemize
forgetting to wait for futures to complete – race conditions
\end_layout

\begin_layout Itemize
expecting to see a stack trace from exceptions inside a 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Itemize
using one thread pool for everything – thread starvation
\end_layout

\begin_layout Itemize
forgetting to shut down the thread pool – application never quits 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\begin_inset Quotes eld
\end_inset

thread-safe
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Thread-safe methods:
\end_layout

\begin_layout Itemize
work correctly even if called from many threads in parallel
\end_layout

\begin_layout Itemize
either have no mutable state, or manage it with great care
\end_layout

\begin_layout Standard
Examples of thread-safe methods: 
\end_layout

\begin_layout Itemize

\family typewriter
\size small
\color blue
AtomicInteger.incrementAndGet()
\end_layout

\begin_layout Itemize

\family typewriter
\size small
\color blue
ConcurrentLinkedQueue.add()
\end_layout

\begin_layout Standard
Example of a non-thread-safe method: 
\end_layout

\begin_layout Itemize

\family typewriter
\size small
\color blue
MockitoSugar.mock[T]()
\family default
\size default
\color inherit
 – deadlocks when running tests in parallel
\end_layout

\begin_layout Standard
Workarounds for non-thread-safe code:
\end_layout

\begin_layout Itemize
wrap in 
\family typewriter
\size small
\color blue
synchronized
\end_layout

\begin_layout Itemize
in some cases, can simply use 
\family typewriter
\size small
\color blue
fork in Test := true
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\begin_inset Quotes eld
\end_inset

non-blocking
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Non-blocking methods:
\end_layout

\begin_layout Itemize
return quickly, although they may 
\emph on
schedule
\emph default
 long-running calculations
\end_layout

\begin_layout Itemize
do not perform an idle wait 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size small
\color blue
Thread.sleep()
\family default
\size default
\color inherit
 or 
\family typewriter
\size small
\color blue
Await.result()
\end_layout

\end_deeper
\begin_layout Itemize
do not perform a busy wait 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\size small
\color blue
while( ! isReady() ) { doNothingLoop() }
\end_layout

\end_deeper
\begin_layout Itemize
do not perform slow I/O (e.g.
 HTTP with high latency)
\end_layout

\begin_layout Standard
Thread pools perform best when most tasks are non-blocking calls
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Blocked threads cause suboptimal CPU utilization, a.k.a.
 
\begin_inset Quotes eld
\end_inset

slowness
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Can we avoid 
\begin_inset Quotes eld
\end_inset

blocking
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We could avoid blocking if arriving events could 
\emph on
wake up
\emph default
 our threads...
 but:
\end_layout

\begin_layout Itemize
A thread cannot be 
\begin_inset Quotes eld
\end_inset

woken up
\begin_inset Quotes erd
\end_inset

 if it isn't already blocked (
\begin_inset Quotes eld
\end_inset

sleeping
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Someone, somewhere has to keep a blocked thread waiting for events
\end_layout

\begin_layout Itemize
However, it does not have to be within 
\emph on
our
\emph default
 thread pools!
\end_layout

\begin_layout Standard
If we never 
\family typewriter
\size small
\color blue
Await.result()
\family default
\size default
\color inherit
, we would never get any non-
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 values...
\end_layout

\begin_layout Itemize
Someone, somewhere has to do 
\family typewriter
\size small
\color blue
Await.result()
\end_layout

\begin_layout Itemize
However, it does not have to be within 
\emph on
our
\emph default
 code (except in unit tests)
\end_layout

\begin_layout Itemize
With the right libraries (Akka, etc.), our code never needs to block or to
 do 
\family typewriter
\size small
\color blue
Await.result()
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How and when to convert 
\begin_inset Quotes eld
\end_inset

blocking
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

non-blocking
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Given a 3rd party blocking call 
\family typewriter
\size small
\color blue
doHttpWork()
\family default
\size default
\color inherit
, our options are:
\end_layout

\begin_layout Itemize
Wrap it in a 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
 using the 
\family typewriter
\size small
\color blue
scala.concurrent.blocking()
\family default
\size default
\color inherit
 function
\end_layout

\begin_layout Itemize
Use a new thread pool dedicated to scheduling 
\family typewriter
\size small
\color blue
doHttpWork()
\family default
\size default
\color inherit
 tasks
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Note: It's OK to block if we are 
\emph on
not
\emph default
 within concurrent code
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Sample code: 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/winitzki/scala-threads-futures-intro"

\end_inset


\end_layout

\begin_layout Itemize
The backbone of Java concurrency: thread pool executors
\end_layout

\begin_layout Itemize
How and when do 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
s run? On thread pools
\end_layout

\begin_layout Itemize
What does it mean to be “thread safe” and “nonblocking”?
\end_layout

\begin_deeper
\begin_layout Itemize
nonblocking = 
\size small
\color blue
uses
\size default
\color inherit
 multi-core CPU optimally
\end_layout

\begin_layout Itemize
thread safe = permits easy concurrent nonblocking code
\end_layout

\end_deeper
\begin_layout Itemize
Some typical “gotchas” when using 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
s in the real world
\end_layout

\begin_layout Itemize
Converting other async APIs to 
\family typewriter
\size small
\color blue
Future
\family default
\size default
\color inherit
s and back
\end_layout

\end_deeper
\end_body
\end_document
